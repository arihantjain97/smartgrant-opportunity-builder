Directory Structure:
==================================================
└── src/
    ├── app/
    │   └── routes/
    │       └── AppRouter.tsx
    ├── components/
    │   ├── coach/
    │   │   └── ChatWindow.tsx
    │   ├── common/
    │   │   ├── Alert.tsx
    │   │   ├── Card.tsx
    │   │   ├── Header.tsx
    │   │   ├── Launchpad.tsx
    │   │   ├── LeadScoreBadge.tsx
    │   │   ├── MetricTiles.tsx
    │   │   ├── ModeCard.tsx
    │   │   ├── PageHeader.tsx
    │   │   ├── PeekNextStep.tsx
    │   │   ├── Pipeline.tsx
    │   │   └── StatusBadge.tsx
    │   └── ui/
    ├── features/
    │   ├── dashboard/
    │   │   ├── consultant/
    │   │   │   └── ConsultantDashboard.tsx
    │   │   ├── sme/
    │   │   │   └── SmeDashboard.tsx
    │   │   └── vendor/
    │   │       └── VendorDashboard.tsx
    │   ├── leads/
    │   │   ├── ConsultantLeadInbox.tsx
    │   │   └── VendorLeadInbox.tsx
    │   └── opportunityBuilder/
    │       ├── comparison/
    │       │   └── ComparisonView.tsx
    │       └── sme/
    │           ├── CompareDrawer.tsx
    │           ├── Step1_GoalCapture.tsx
    │           ├── Step2_TRHLS.tsx
    │           ├── Step3_PrivacyAndConsent.tsx
    │           ├── Step4_MatchingMode.tsx
    │           └── Step5_PreviewAndDispatch.tsx
    ├── lib/
    │   └── utils.ts
    ├── mocks/
    │   ├── api.ts
    │   ├── seeds.trhls.ts
    │   └── seeds.ts
    ├── state/
    │   ├── coach/
    │   │   ├── coachConfig.ts
    │   │   ├── coachMachine.ts
    │   │   └── types.ts
    │   ├── opportunity/
    │   │   └── uiHints.ts
    │   ├── trhls/
    │   │   ├── impact.ts
    │   │   └── store.ts
    │   ├── store.ts
    │   └── types.ts
    ├── styles/
    │   └── index.css
    ├── App.tsx
    └── main.tsx

File: App.tsx
[App.tsx: start]
import AppRouter from './app/routes/AppRouter';

function App() {
  return (
    <div className="min-h-screen bg-slate-50 font-sans">
      <AppRouter />
    </div>
  );
}

export default App;
[App.tsx: end]

File: app/routes/AppRouter.tsx
[AppRouter.tsx: start]
import React, { useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { useAppStore } from '../../state/store';
import { Header } from '../../components/common/Header';
import { SmeDashboard } from '../../features/dashboard/sme/SmeDashboard';
import { VendorDashboard } from '../../features/dashboard/vendor/VendorDashboard';
import { ConsultantDashboard } from '../../features/dashboard/consultant/ConsultantDashboard';
import { VendorLeadInbox } from '../../features/leads/VendorLeadInbox';
import { ConsultantLeadInbox } from '../../features/leads/ConsultantLeadInbox';
import { Step1_GoalCapture } from '../../features/opportunityBuilder/sme/Step1_GoalCapture';
import { Step2_TRHLS } from '../../features/opportunityBuilder/sme/Step2_TRHLS';
import { Step3_PrivacyAndConsent } from '../../features/opportunityBuilder/sme/Step3_PrivacyAndConsent';
import { Step4_MatchingMode } from '../../features/opportunityBuilder/sme/Step4_MatchingMode';
import { Step5_PreviewAndDispatch } from '../../features/opportunityBuilder/sme/Step5_PreviewAndDispatch';
import { ComparisonView } from '../../features/opportunityBuilder/comparison/ComparisonView';

const AppRouter: React.FC = () => {
  const { currentPersona } = useAppStore();
  const [currentStep, setCurrentStep] = useState(1);

  const handleStartNewOpportunity = () => {
    setCurrentStep(1);
  };

  const handleNextStep = () => {
    setCurrentStep(prev => prev + 1);
  };

  const handleBackStep = () => {
    setCurrentStep(prev => prev - 1);
  };

  const handleFinish = () => {
    setCurrentStep(1);
  };

  const renderSMEBuilder = () => {
    switch (currentStep) {
      case 1:
        return <Step1_GoalCapture onNext={handleNextStep} onBack={handleFinish} />;
      case 2:
        return <Step2_TRHLS onNext={handleNextStep} onBack={handleBackStep} />;
      case 3:
        return <Step3_PrivacyAndConsent onNext={handleNextStep} onBack={handleBackStep} />;
      case 4:
        return <Step4_MatchingMode onNext={handleNextStep} onBack={handleBackStep} />;
      case 5:
        return <Step5_PreviewAndDispatch onNext={handleFinish} onBack={handleBackStep} />;
      default:
        return <Step1_GoalCapture onNext={handleNextStep} onBack={handleFinish} />;
    }
  };

  const renderDashboard = () => {
    switch (currentPersona) {
      case 'SME':
        return <SmeDashboard onStartNewOpportunity={() => {}} />;
      case 'VENDOR':
        return <VendorDashboard onViewLead={(leadId) => console.log('View lead:', leadId)} />;
      case 'CONSULTANT':
        return <ConsultantDashboard onViewLead={(leadId) => console.log('View lead:', leadId)} />;
      default:
        return <SmeDashboard onStartNewOpportunity={() => {}} />;
    }
  };

  const renderLeadInbox = () => {
    switch (currentPersona) {
      case 'VENDOR':
        return <VendorLeadInbox />;
      case 'CONSULTANT':
        return <ConsultantLeadInbox />;
      default:
        return <Navigate to="/dashboard" replace />;
    }
  };

  return (
    <Router>
      <Header />
      <main className="p-4 md:p-6">
        <Routes>
          <Route path="/" element={<Navigate to="/dashboard" replace />} />
          <Route path="/dashboard" element={renderDashboard()} />
          <Route path="/leads" element={renderLeadInbox()} />
          <Route path="/sme/builder" element={renderSMEBuilder()} />
          <Route path="/comparison/:reqDocId" element={<ComparisonView reqDocId="reqdoc-1" onBack={() => window.history.back()} />} />
          <Route path="*" element={<Navigate to="/dashboard" replace />} />
        </Routes>
      </main>
    </Router>
  );
};

export default AppRouter;
[AppRouter.tsx: end]

File: components/coach/ChatWindow.tsx
[ChatWindow.tsx: start]
import React, { useEffect, useRef, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Brain, User, CheckCircle, Sparkles } from 'lucide-react';
import { ChatMessage } from '../../state/coach/types';

interface ChatWindowProps {
  messages: ChatMessage[];
  onAction: (actionId: string) => void;
  isTyping?: boolean;
}

const TypingDots: React.FC<{ visible: boolean }> = ({ visible }) => {
  if (!visible) return null;
  
  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -10 }}
      className="flex items-center gap-2 text-sm text-slate-500 py-2"
    >
      <div className="flex gap-1">
        <motion.div
          className="w-2 h-2 bg-blue-400 rounded-full"
          animate={{ scale: [1, 1.2, 1] }}
          transition={{ duration: 0.6, repeat: Infinity, delay: 0 }}
        />
        <motion.div
          className="w-2 h-2 bg-blue-400 rounded-full"
          animate={{ scale: [1, 1.2, 1] }}
          transition={{ duration: 0.6, repeat: Infinity, delay: 0.2 }}
        />
        <motion.div
          className="w-2 h-2 bg-blue-400 rounded-full"
          animate={{ scale: [1, 1.2, 1] }}
          transition={{ duration: 0.6, repeat: Infinity, delay: 0.4 }}
        />
      </div>
      <span>AI Coach is typing...</span>
    </motion.div>
  );
};

const MessageBubble: React.FC<{ 
  message: ChatMessage; 
  onAction: (actionId: string) => void;
  index: number;
}> = ({ message, onAction, index }) => {
  const getRoleIcon = (role: string) => {
    switch (role) {
      case 'AI':
        return <Brain size={16} className="text-blue-600" />;
      case 'SME':
        return <User size={16} className="text-slate-600" />;
      case 'SYSTEM':
        return <CheckCircle size={16} className="text-emerald-600" />;
      default:
        return null;
    }
  };

  const getBubbleStyles = (role: string) => {
    switch (role) {
      case 'AI':
        return 'bg-gradient-to-br from-[#F0F6FF] to-[#F9FBFF] border-[#E0E8F8] text-gray-700';
      case 'SME':
        return 'bg-white border-gray-200 text-gray-900';
      case 'SYSTEM':
        return 'bg-[#F9FAFB] text-gray-500 text-sm italic border-0';
      default:
        return 'bg-slate-50 border-slate-200 text-slate-800';
    }
  };

  const getContainerStyles = (role: string) => {
    switch (role) {
      case 'AI':
        return 'justify-start';
      case 'SME':
        return 'justify-end';
      case 'SYSTEM':
        return 'justify-center';
      default:
        return 'justify-start';
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95, y: 10 }}
      animate={{ opacity: 1, scale: 1, y: 0 }}
      transition={{ 
        duration: 0.25, 
        delay: index * 0.1,
        ease: "easeOut"
      }}
      className={`flex ${getContainerStyles(message.role)} mb-4`}
    >
      <motion.div 
        className={`max-w-[80%] rounded-2xl border p-4 shadow-sm ${getBubbleStyles(message.role)}`}
        whileHover={{ scale: 1.02 }}
        transition={{ duration: 0.2 }}
      >
        <div className="flex items-start gap-2 mb-2">
          {getRoleIcon(message.role)}
          <span className={`text-xs font-medium uppercase tracking-wide ${
            message.role === 'AI' ? 'text-blue-700' : 
            message.role === 'SME' ? 'text-gray-700' : 
            'text-gray-500'
          }`}>
            {message.role === 'SME' ? 'You' : message.role === 'AI' ? 'AI Coach' : 'System'}
          </span>
        </div>
        
        <div className="text-sm leading-relaxed whitespace-pre-line">
          {message.text}
        </div>
        
        {message.actions && message.actions.length > 0 && (
          <motion.div 
            className="mt-3 flex flex-wrap gap-2"
            initial={{ opacity: 0, y: 5 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
          >
            {message.actions.map((action) => (
              <motion.button
                key={action.id}
                onClick={() => onAction(action.id)}
                className="px-3 py-1.5 bg-white border border-slate-300 rounded-lg text-xs font-medium text-slate-700 hover:bg-slate-50 hover:border-slate-400 transition-all duration-200"
                whileHover={{ scale: 1.05, boxShadow: "0 4px 12px rgba(0,0,0,0.1)" }}
                whileTap={{ scale: 0.98 }}
              >
                {action.label}
              </motion.button>
            ))}
          </motion.div>
        )}
      </motion.div>
    </motion.div>
  );
};

export const ChatWindow: React.FC<ChatWindowProps> = ({ messages, onAction, isTyping = false }) => {
  const chatEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, isTyping]);

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.4, ease: "easeOut" }}
      className="bg-white rounded-2xl border border-slate-200 shadow-lg overflow-hidden"
    >
      {/* Sticky Header */}
      <div className="sticky top-0 bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-slate-200 px-6 py-4">
        <div className="flex items-center gap-2">
          <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center">
            <Brain size={16} className="text-white" />
          </div>
          <h3 className="font-semibold text-slate-900">AI Coach</h3>
          <Sparkles size={16} className="text-blue-500" />
        </div>
      </div>

      {/* Chat Content */}
      <div className="max-h-[420px] overflow-y-auto px-6 py-4">
        <div className="space-y-4">
          {messages.length === 0 ? (
            <motion.div 
              className="text-center text-slate-500 py-8"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.2 }}
            >
              <Brain size={32} className="mx-auto mb-2 text-slate-400" />
              <p className="text-sm">AI Coach is ready to help refine your goal</p>
            </motion.div>
          ) : (
            <AnimatePresence>
              {messages.map((message, index) => (
                <MessageBubble
                  key={message.id}
                  message={message}
                  onAction={onAction}
                  index={index}
                />
              ))}
            </AnimatePresence>
          )}
          
          <TypingDots visible={isTyping} />
          <div ref={chatEndRef} />
        </div>
      </div>
    </motion.div>
  );
};
[ChatWindow.tsx: end]

File: components/common/Alert.tsx
[Alert.tsx: start]
import React from 'react';
import { motion } from 'framer-motion';
import { CheckCircle, AlertCircle, Info, X } from 'lucide-react';

interface AlertProps {
  variant?: 'success' | 'warning' | 'error' | 'info';
  children: React.ReactNode;
  onClose?: () => void;
  className?: string;
}

export const Alert: React.FC<AlertProps> = ({ 
  variant = 'info', 
  children, 
  onClose,
  className = "" 
}) => {
  const getVariantStyles = () => {
    switch (variant) {
      case 'success':
        return 'bg-emerald-50 border-emerald-200 text-emerald-800';
      case 'warning':
        return 'bg-amber-50 border-amber-200 text-amber-800';
      case 'error':
        return 'bg-red-50 border-red-200 text-red-800';
      case 'info':
      default:
        return 'bg-blue-50 border-blue-200 text-blue-800';
    }
  };

  const getIcon = () => {
    switch (variant) {
      case 'success':
        return <CheckCircle size={16} className="text-emerald-600" />;
      case 'warning':
        return <AlertCircle size={16} className="text-amber-600" />;
      case 'error':
        return <X size={16} className="text-red-600" />;
      case 'info':
      default:
        return <Info size={16} className="text-blue-600" />;
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -10 }}
      transition={{ duration: 0.3, ease: "easeOut" }}
      className={`rounded-xl border p-4 ${getVariantStyles()} ${className}`}
    >
      <div className="flex items-start gap-3">
        {getIcon()}
        <div className="flex-1 text-sm font-medium">
          {children}
        </div>
        {onClose && (
          <button
            onClick={onClose}
            className="text-slate-400 hover:text-slate-600 transition-colors"
          >
            <X size={16} />
          </button>
        )}
      </div>
    </motion.div>
  );
};
[Alert.tsx: end]

File: components/common/Card.tsx
[Card.tsx: start]
import React from 'react';
import { cn } from '../../lib/utils';

interface CardProps {
  children: React.ReactNode;
  className?: string;
  onClick?: () => void;
}

export const Card: React.FC<CardProps> = ({ children, className = "", onClick }) => (
  <div 
    onClick={onClick} 
    className={cn(
      "bg-white rounded-xl shadow-sm border border-slate-200/60 p-4 sm:p-6 transition-all duration-200",
      onClick ? 'cursor-pointer hover:shadow-md hover:-translate-y-0.5 hover:border-slate-300' : '',
      className
    )}
  >
    {children}
  </div>
);
[Card.tsx: end]

File: components/common/Header.tsx
[Header.tsx: start]
import React from 'react';
import { Bell, MessageSquare, CircleDollarSign, LayoutDashboard, ShoppingCart } from 'lucide-react';
import { useAppStore } from '../../state/store';
import { Persona } from '../../state/types';
import { useNavigate, useLocation } from 'react-router-dom';

const SmartGrantLogo = () => (
  <svg width="28" height="28" viewBox="0 0 54 52" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M27 51.5L0.5 0.5H53.5L27 51.5Z" fill="black" stroke="#FBBF24"/>
    <path d="M27 51.5L0.5 0.5H27V51.5Z" fill="#FBBF24"/>
    <path d="M27 26L53.5 0.5H27V26Z" fill="#D97706"/>
    <path d="M13.5 26L27 0.5H0.5L13.5 26Z" fill="#111827"/>
    <path d="M40.5 26L27 51.5L53.5 0.5L40.5 26Z" fill="#111827"/>
  </svg>
);

const RoleButton: React.FC<{ role: Persona; isActive: boolean; onClick: () => void }> = ({ role, isActive, onClick }) => (
  <button 
    onClick={onClick} 
    className={`px-3 py-1.5 sm:px-4 sm:py-2 text-xs sm:text-sm font-medium rounded-lg transition-all duration-200 ${
      isActive 
        ? 'bg-blue-600 text-white shadow-sm' 
        : 'bg-white text-slate-700 hover:bg-slate-100 border border-slate-200'
    }`}
  >
    {role.charAt(0) + role.slice(1).toLowerCase()}
  </button>
);

const NavTab: React.FC<{ tabId: string; label: string; icon: React.ElementType; isActive: boolean; onClick: () => void }> = ({ label, icon: Icon, isActive, onClick }) => (
  <button 
    onClick={onClick} 
    className={`flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-t-lg transition-colors border-b-2 ${
      isActive 
        ? 'border-blue-500 text-blue-600' 
        : 'border-transparent text-slate-500 hover:text-slate-700'
    }`}
  >
    <Icon size={16} />
    {label}
  </button>
);

export const Header: React.FC = () => {
  const { currentPersona, setCurrentPersona } = useAppStore();
  const navigate = useNavigate();
  const location = useLocation();
  const personas: Persona[] = ['SME', 'CONSULTANT', 'VENDOR'];

  return (
    <>
      <header className="bg-white sticky top-0 z-30 flex items-center justify-between h-16 px-4 md:px-6 border-b border-slate-200 shadow-sm">
        <div className="flex items-center gap-4">
          <SmartGrantLogo />
          <h1 className="hidden sm:block text-xl font-bold text-slate-800">
            SmartGrant.ai
          </h1>
        </div>
        
        <div className="flex items-center gap-1 bg-slate-100 p-1 rounded-lg">
          {personas.map(role => (
            <RoleButton
              key={role}
              role={role}
              isActive={currentPersona === role}
              onClick={() => setCurrentPersona(role)}
            />
          ))}
        </div>
        
        <div className="flex items-center gap-2 sm:gap-4">
          <button className="p-2 text-slate-500 rounded-full hover:bg-slate-200 transition-colors">
            <Bell size={20}/>
          </button>
          <button className="p-2 text-slate-500 rounded-full hover:bg-slate-200 transition-colors">
            <MessageSquare size={20}/>
          </button>
          <button className="p-2 text-slate-500 rounded-full hover:bg-slate-200 transition-colors">
            <CircleDollarSign size={20}/>
          </button>
          <img 
            src={`https://i.pravatar.cc/40?u=${currentPersona}`} 
            alt="User Avatar" 
            className="w-10 h-10 rounded-full border-2 border-transparent hover:border-indigo-500" 
          />
        </div>
      </header>
      
      {(currentPersona === 'CONSULTANT' || currentPersona === 'VENDOR') && (location.pathname === '/dashboard' || location.pathname === '/leads') && (
        <div className="flex items-center border-b border-slate-200">
          <NavTab 
            tabId="dashboard" 
            label="Dashboard" 
            icon={LayoutDashboard} 
            isActive={location.pathname === '/dashboard'} 
            onClick={() => navigate('/dashboard')} 
          />
          <NavTab 
            tabId="leads" 
            label="Lead Marketplace" 
            icon={ShoppingCart} 
            isActive={location.pathname === '/leads'} 
            onClick={() => navigate('/leads')} 
          />
        </div>
      )}
    </>
  );
};
[Header.tsx: end]

File: components/common/Launchpad.tsx
[Launchpad.tsx: start]
import React from 'react';
import { Card } from './Card';

interface LaunchpadProps {
  onStartNewOpportunity: () => void;
}

export const Launchpad: React.FC<LaunchpadProps> = ({ onStartNewOpportunity }) => {
  return (
    <Card className="text-center bg-gradient-to-r from-indigo-50 to-blue-50 border-indigo-200/50">
      <div className="flex items-center justify-center gap-2 mb-2">
        <span className="text-2xl">✨</span>
        <h2 className="text-xl font-semibold text-slate-900">Launchpad</h2>
      </div>
      <p className="text-slate-600 mb-6">Turn your business goals into a live project.</p>
      <button 
        onClick={onStartNewOpportunity}
        className="bg-indigo-600 text-white font-medium px-8 py-3 rounded-lg hover:bg-indigo-700 transition-colors shadow-sm hover:shadow-md"
      >
        Start New Opportunity
      </button>
    </Card>
  );
};
[Launchpad.tsx: end]

File: components/common/LeadScoreBadge.tsx
[LeadScoreBadge.tsx: start]
import React from 'react';

interface LeadScoreBadgeProps {
  score?: number;
  statusText?: string;
}

export const LeadScoreBadge: React.FC<LeadScoreBadgeProps> = ({ score = 68, statusText }) => {
  const status = statusText || (score >= 80 ? "Hot" : score >= 60 ? "Warm" : "Cold");
  const color = status === "Hot" 
    ? "bg-red-50 text-red-700 border border-red-200"
    : status === "Warm" 
    ? "bg-amber-50 text-amber-700 border border-amber-200"
    : "bg-slate-50 text-slate-600 border border-slate-200";
    
  return (
    <div className="flex items-center gap-2">
      <span className={`px-2 py-1 rounded-md text-xs font-medium ${color}`}>
        {status}
      </span>
      <span className="text-xs text-slate-500 font-medium">Score {score}</span>
    </div>
  );
};
[LeadScoreBadge.tsx: end]

File: components/common/MetricTiles.tsx
[MetricTiles.tsx: start]
import React from 'react';
import { LucideIcon, ShieldCheck, Award, DollarSign, FileText } from 'lucide-react';
import { Card } from './Card';

interface KpiCardProps {
  icon: LucideIcon;
  title: string;
  value: string;
  gradient: string;
  iconColor: string;
}

const KpiCard: React.FC<KpiCardProps> = ({ icon: Icon, title, value, gradient, iconColor }) => (
  <Card className={`relative overflow-hidden ${gradient} border-0 shadow-sm`}>
    <div className="flex items-start justify-between">
      <div>
        <p className="font-medium text-slate-600 text-sm">{title}</p>
        <p className="text-3xl font-bold text-slate-900 mt-1">{value}</p>
      </div>
      <Icon className={`w-8 h-8 ${iconColor} opacity-80`} />
    </div>
  </Card>
);

export const MetricTiles: React.FC = () => {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      <KpiCard 
        title="Eligibility Score" 
        value="82%" 
        icon={ShieldCheck} 
        gradient="bg-gradient-to-br from-emerald-50 to-emerald-100" 
        iconColor="text-emerald-600" 
      />
      <KpiCard 
        title="Grants Matched" 
        value="6" 
        icon={Award} 
        gradient="bg-gradient-to-br from-blue-50 to-blue-100" 
        iconColor="text-blue-600" 
      />
      <KpiCard 
        title="Funding Potential" 
        value="S$ 250K" 
        icon={DollarSign} 
        gradient="bg-gradient-to-br from-amber-50 to-amber-100" 
        iconColor="text-amber-600" 
      />
      <KpiCard 
        title="Apps in Progress" 
        value="2" 
        icon={FileText} 
        gradient="bg-gradient-to-br from-violet-50 to-violet-100" 
        iconColor="text-violet-600" 
      />
    </div>
  );
};
[MetricTiles.tsx: end]

File: components/common/ModeCard.tsx
[ModeCard.tsx: start]
import React from 'react';
import { motion } from 'framer-motion';
import { CheckCircle, User, Users, Clock, TrendingUp } from 'lucide-react';

interface ModeCardProps {
  mode: 'CONSULTANT_MANAGED' | 'SME_SELF_MANAGED';
  isSelected: boolean;
  isRecommended: boolean;
  onSelect: () => void;
  copy: {
    value: string;
    youHandle: readonly string[];
    weHandle: readonly string[];
    badges: readonly string[];
    effort: string;
    grantAlignment: number;
    timeToFirstQuote: string;
    footnote: string;
  };
}

const EffortMeter: React.FC<{ 
  effort: string; 
  grantAlignment: number; 
  timeToFirstQuote: string;
}> = ({ effort, grantAlignment, timeToFirstQuote }) => {
  const getEffortColor = (effort: string) => {
    switch (effort.toLowerCase()) {
      case 'low': return 'text-emerald-600 bg-emerald-50 border-emerald-200';
      case 'medium': return 'text-amber-600 bg-amber-50 border-amber-200';
      case 'high': return 'text-red-600 bg-red-50 border-red-200';
      default: return 'text-slate-600 bg-slate-50 border-slate-200';
    }
  };

  return (
    <div className="space-y-3">
      {/* Effort Tag */}
      <div className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium border ${getEffortColor(effort)}`}>
        <User size={12} />
        Your effort: {effort}
      </div>

      {/* Grant Alignment Meter */}
      <div className="space-y-1">
        <div className="flex justify-between items-center">
          <span className="text-xs font-medium text-slate-600">Grant alignment</span>
          <span className="text-xs text-slate-500">{Math.round(grantAlignment * 100)}%</span>
        </div>
        <div className="w-full bg-slate-200 rounded-full h-2">
          <motion.div
            className="bg-indigo-500 h-2 rounded-full"
            initial={{ width: 0 }}
            animate={{ width: `${grantAlignment * 100}%` }}
            transition={{ duration: 0.8, ease: "easeOut" }}
          />
        </div>
      </div>

      {/* Time Tag */}
      <div className="flex items-center gap-1 text-xs text-slate-600">
        <Clock size={12} />
        Time to first quote: {timeToFirstQuote}
      </div>
    </div>
  );
};

export const ModeCard: React.FC<ModeCardProps> = ({ 
  mode, 
  isSelected, 
  isRecommended, 
  onSelect, 
  copy 
}) => {
  const isConsultant = mode === 'CONSULTANT_MANAGED';

  return (
    <motion.div
      whileHover={{ y: -2 }}
      whileTap={{ scale: 0.98 }}
      onClick={onSelect}
      className={`relative cursor-pointer transition-all duration-200 ${
        isSelected 
          ? 'ring-2 ring-indigo-500 shadow-md' 
          : 'hover:shadow-md'
      }`}
    >
      <div className={`rounded-2xl border border-slate-200 shadow-sm p-6 h-full ${
        isSelected ? 'bg-indigo-50' : 'bg-white'
      }`}>
        {/* Selection Badge */}
        {isSelected && (
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            className="absolute -top-2 -right-2 w-6 h-6 bg-indigo-600 rounded-full flex items-center justify-center shadow-lg"
          >
            <CheckCircle size={14} className="text-white" />
          </motion.div>
        )}

        {/* Header */}
        <div className="mb-4">
          <div className="flex items-start justify-between mb-2">
            <h3 className="font-semibold text-slate-900 text-lg">
              {isConsultant ? 'Consultant-Managed' : 'SME Self-Managed'}
            </h3>
            {isRecommended && (
              <span className="px-2 py-1 bg-emerald-50 text-emerald-700 text-xs font-medium rounded-full border border-emerald-200">
                Recommended
              </span>
            )}
          </div>
          <p className="text-sm text-slate-600 mb-3">{copy.value}</p>
        </div>

        {/* Badges */}
        <div className="flex flex-wrap gap-2 mb-4">
          {copy.badges.map((badge, index) => (
            <motion.span
              key={badge}
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: index * 0.1 }}
              className="px-2 py-1 bg-slate-50 text-slate-700 text-xs font-medium rounded-full border border-slate-200"
            >
              {badge}
            </motion.span>
          ))}
        </div>

        {/* Responsibilities */}
        <div className="space-y-4 mb-4">
          {/* You Handle */}
          <div>
            <h4 className="text-xs font-medium text-slate-700 mb-2 flex items-center gap-1">
              <User size={12} />
              You handle
            </h4>
            <ul className="space-y-1">
              {copy.youHandle.map((item, index) => (
                <motion.li
                  key={item}
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.1 + index * 0.05 }}
                  className="text-xs text-slate-600 flex items-center gap-2"
                >
                  <div className="w-1 h-1 bg-slate-400 rounded-full" />
                  {item}
                </motion.li>
              ))}
            </ul>
          </div>

          {/* We Handle */}
          <div>
            <h4 className="text-xs font-medium text-slate-700 mb-2 flex items-center gap-1">
              <Users size={12} />
              SmartGrant {isConsultant ? '+ Consultant' : ''} handle
            </h4>
            <ul className="space-y-1">
              {copy.weHandle.map((item, index) => (
                <motion.li
                  key={item}
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.2 + index * 0.05 }}
                  className="text-xs text-slate-600 flex items-center gap-2"
                >
                  <div className="w-1 h-1 bg-slate-400 rounded-full" />
                  {item}
                </motion.li>
              ))}
            </ul>
          </div>
        </div>

        {/* Metrics */}
        <div className="pt-4 border-t border-slate-200">
          <EffortMeter
            effort={copy.effort}
            grantAlignment={copy.grantAlignment}
            timeToFirstQuote={copy.timeToFirstQuote}
          />
        </div>

        {/* Footnote */}
        <div className="mt-4 pt-3 border-t border-slate-200">
          <p className="text-xs text-slate-500">{copy.footnote}</p>
        </div>
      </div>
    </motion.div>
  );
};
[ModeCard.tsx: end]

File: components/common/PageHeader.tsx
[PageHeader.tsx: start]
import React from 'react';

interface PageHeaderProps {
  title: string;
  subtitle?: string;
  children?: React.ReactNode;
}

export const PageHeader: React.FC<PageHeaderProps> = ({ title, subtitle, children }) => (
  <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center mb-6">
    <div>
      <h2 className="text-2xl md:text-3xl font-bold text-slate-900">
        {title}
      </h2>
      {subtitle && (
        <p className="text-slate-600 mt-1 max-w-2xl">
          {subtitle}
        </p>
      )}
    </div>
    <div className="mt-4 lg:mt-0 w-full lg:w-auto">
      {children}
    </div>
  </div>
);
[PageHeader.tsx: end]

File: components/common/PeekNextStep.tsx
[PeekNextStep.tsx: start]
import React from 'react';
import { motion } from 'framer-motion';
import { X, Users, FileText, CheckCircle, ArrowRight } from 'lucide-react';

interface PeekNextStepProps {
  isOpen: boolean;
  onClose: () => void;
  selectedMode: 'CONSULTANT_MANAGED' | 'SME_SELF_MANAGED';
}

const StepCard: React.FC<{ 
  step: number; 
  title: string; 
  description: string; 
  icon: React.ElementType;
  index: number;
}> = ({ step, title, description, icon: Icon, index }) => (
  <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ delay: index * 0.1 }}
    className="flex items-start gap-4 p-4 bg-slate-50 rounded-lg"
  >
    <div className="w-8 h-8 bg-indigo-100 rounded-full flex items-center justify-center flex-shrink-0">
      <span className="text-sm font-bold text-indigo-600">{step}</span>
    </div>
    <div className="flex-1">
      <div className="flex items-center gap-2 mb-1">
        <Icon size={16} className="text-slate-600" />
        <h4 className="font-medium text-slate-900 text-sm">{title}</h4>
      </div>
      <p className="text-xs text-slate-600">{description}</p>
    </div>
  </motion.div>
);

export const PeekNextStep: React.FC<PeekNextStepProps> = ({ 
  isOpen, 
  onClose, 
  selectedMode 
}) => {
  const isConsultant = selectedMode === 'CONSULTANT_MANAGED';

  const consultantSteps = [
    {
      step: 1,
      title: "We invite top consultants",
      description: "SmartGrant identifies and invites 3-5 qualified consultants based on your project scope and grant requirements.",
      icon: Users
    },
    {
      step: 2,
      title: "You review proposals",
      description: "Consultants submit detailed proposals with vendor recommendations, timelines, and grant application strategies.",
      icon: FileText
    },
    {
      step: 3,
      title: "Consultant shortlists vendors",
      description: "Your chosen consultant creates a curated shortlist of vendors and manages the invitation process.",
      icon: CheckCircle
    }
  ];

  const selfManagedSteps = [
    {
      step: 1,
      title: "We invite top vendors",
      description: "SmartGrant identifies and invites 5-8 qualified vendors based on your TRHLS selections and requirements.",
      icon: Users
    },
    {
      step: 2,
      title: "You review quotations",
      description: "Vendors submit detailed quotations with pricing, timelines, and implementation plans for your review.",
      icon: FileText
    },
    {
      step: 3,
      title: "We invite consultants (optional)",
      description: "If you need grant support, we can connect you with consultants to assist with applications.",
      icon: CheckCircle
    }
  ];

  const steps = isConsultant ? consultantSteps : selfManagedSteps;

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="fixed inset-0 bg-black/50 z-50 flex items-end md:items-center justify-center p-4"
      onClick={onClose}
    >
      <motion.div
        initial={{ y: '100%', opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        exit={{ y: '100%', opacity: 0 }}
        transition={{ duration: 0.3, ease: "easeOut" }}
        className="bg-white rounded-t-2xl md:rounded-2xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-hidden"
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div className="sticky top-0 bg-gradient-to-r from-indigo-50 to-sky-50 border-b border-slate-200 px-6 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-lg font-semibold text-slate-900">What happens next</h2>
              <p className="text-sm text-slate-600">
                {isConsultant ? 'Consultant-Managed' : 'SME Self-Managed'} workflow
              </p>
            </div>
            <button
              onClick={onClose}
              className="p-2 text-slate-400 hover:text-slate-600 transition-colors"
            >
              <X size={20} />
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
          <div className="space-y-4">
            {steps.map((step, index) => (
              <StepCard
                key={step.step}
                step={step.step}
                title={step.title}
                description={step.description}
                icon={step.icon}
                index={index}
              />
            ))}
          </div>

          {/* Reassurance */}
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
            className="mt-6 p-4 bg-emerald-50 rounded-lg border border-emerald-200"
          >
            <div className="flex items-center gap-2">
              <CheckCircle size={16} className="text-emerald-600" />
              <p className="text-sm text-emerald-800">
                You can switch modes before invitations are sent out.
              </p>
            </div>
          </motion.div>
        </div>

        {/* Footer */}
        <div className="sticky bottom-0 bg-white border-t border-slate-200 px-6 py-4">
          <div className="flex items-center justify-between">
            <p className="text-xs text-slate-500">
              Ready to proceed with {isConsultant ? 'consultant-guided' : 'self-managed'} workflow?
            </p>
            <motion.button
              onClick={onClose}
              className="bg-indigo-600 text-white font-medium px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors flex items-center gap-2 text-sm"
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              Got it
              <ArrowRight size={14} />
            </motion.button>
          </div>
        </div>
      </motion.div>
    </motion.div>
  );
};
[PeekNextStep.tsx: end]

File: components/common/Pipeline.tsx
[Pipeline.tsx: start]
import React from 'react';
import { Users, Briefcase, DollarSign } from 'lucide-react';
import { Card } from './Card';
import { LeadScoreBadge } from './LeadScoreBadge';

interface PipelineColumnProps {
  title: string;
  children: React.ReactNode;
}

const PipelineColumn: React.FC<PipelineColumnProps> = ({ title, children }) => (
  <div className="bg-slate-50 p-4 rounded-xl min-w-[250px] flex-shrink-0 border border-slate-200/60">
    <h4 className="font-medium text-slate-700 mb-4 px-1 text-sm uppercase tracking-wide">{title}</h4>
    <div className="space-y-3">{children}</div>
  </div>
);

interface PipelineItemCardProps {
  title: string;
  badge: React.ReactNode;
  vendors: string;
  consultants: string;
  budget: string;
}

const PipelineItemCard: React.FC<PipelineItemCardProps> = ({ title, badge, vendors, consultants, budget }) => (
  <Card className="!p-4 !bg-white border-slate-200/60">
    <div className="flex justify-between items-start mb-3">
      <p className="font-medium text-slate-900 pr-2 text-sm">{title}</p>
      {badge}
    </div>
    <div className="flex items-center gap-4 text-xs text-slate-500 mt-3 pt-3 border-t border-slate-100">
      <span className="flex items-center gap-1"><Users size={12}/>{vendors}</span>
      <span className="flex items-center gap-1"><Briefcase size={12}/>{consultants}</span>
      <span className="flex items-center gap-1"><DollarSign size={12}/>{budget}</span>
    </div>
  </Card>
);

export const Pipeline: React.FC = () => {
  return (
    <div className="flex gap-4 pb-4 overflow-x-auto">
      <PipelineColumn title="Drafting">
        <PipelineItemCard 
          title="Upgrade ERP System" 
          badge={<LeadScoreBadge score={85} />} 
          vendors="3" 
          consultants="2" 
          budget="S$40k" 
        />
      </PipelineColumn>
      <PipelineColumn title="In Matching">
        <PipelineItemCard 
          title="Marketing Automation Tool" 
          badge={<LeadScoreBadge score={76} />} 
          vendors="5" 
          consultants="1" 
          budget="S$25k" 
        />
      </PipelineColumn>
      <PipelineColumn title="In Q&A">
        <PipelineItemCard 
          title="Cybersecurity Upgrade" 
          badge={<LeadScoreBadge score={68} />} 
          vendors="2" 
          consultants="1" 
          budget="S$30k" 
        />
      </PipelineColumn>
      <PipelineColumn title="Decisioned">
        <PipelineItemCard 
          title="E-Commerce Revamp" 
          badge={
            <span className="px-2 py-0.5 rounded-full text-xs font-bold bg-green-100 text-green-700 dark:bg-green-500/20 dark:text-green-300">
              Accepted ✔️
            </span>
          } 
          vendors="1" 
          consultants="1" 
          budget="S$50k" 
        />
      </PipelineColumn>
      <PipelineColumn title="In Delivery">
        <PipelineItemCard 
          title="POS System Installation" 
          badge={
            <span className="px-2 py-0.5 rounded-full text-xs font-bold bg-blue-100 text-blue-700 dark:bg-blue-500/20 dark:text-blue-300">
              Ongoing 🚀
            </span>
          } 
          vendors="1" 
          consultants="0" 
          budget="S$15k" 
        />
      </PipelineColumn>
    </div>
  );
};
[Pipeline.tsx: end]

File: components/common/StatusBadge.tsx
[StatusBadge.tsx: start]
import React from 'react';

interface StatusBadgeProps {
  status: string;
  type?: 'application' | 'task' | 'quote' | 'user';
}

export const StatusBadge: React.FC<StatusBadgeProps> = ({ status, type = 'application' }) => {
  const styles = {
    application: { 
      "Approved": "bg-emerald-50 text-emerald-700 border border-emerald-200", 
      "In Review": "bg-amber-50 text-amber-700 border border-amber-200", 
      "Drafting": "bg-blue-50 text-blue-700 border border-blue-200" 
    },
    task: { 
      "High": "bg-red-50 text-red-700 border border-red-200", 
      "Medium": "bg-amber-50 text-amber-700 border border-amber-200", 
      "Low": "bg-slate-50 text-slate-600 border border-slate-200" 
    },
    quote: { 
      "Pending": "bg-blue-50 text-blue-700 border border-blue-200", 
      "Submitted": "bg-amber-50 text-amber-700 border border-amber-200", 
      "Accepted": "bg-emerald-50 text-emerald-700 border border-emerald-200" 
    },
    user: { 
      "Active": "bg-emerald-50 text-emerald-700 border border-emerald-200", 
      "Pending Approval": "bg-amber-50 text-amber-700 border border-amber-200" 
    },
  };
  
  const statusClass = (styles[type] as any)?.[status] || 'bg-slate-100 text-slate-700 border border-slate-200';
  
  return (
    <span className={`px-3 py-1 text-xs sm:text-sm font-medium rounded-full whitespace-nowrap ${statusClass}`}>
      {status}
    </span>
  );
};
[StatusBadge.tsx: end]

File: features/dashboard/consultant/ConsultantDashboard.tsx
[ConsultantDashboard.tsx: start]
import React, { useState } from 'react';
import { Users, Award, Wallet, ShoppingCart, PlusCircle } from 'lucide-react';
import { Card } from '../../../components/common/Card';
import { PageHeader } from '../../../components/common/PageHeader';
import { LeadScoreBadge } from '../../../components/common/LeadScoreBadge';
import { useAppStore } from '../../../state/store';

interface ConsultantDashboardProps {
  onViewLead: (leadId: string) => void;
}

export const ConsultantDashboard: React.FC<ConsultantDashboardProps> = ({ onViewLead }) => {
  const { leads, wallets } = useAppStore();
  const [showAddLeadModal, setShowAddLeadModal] = useState(false);
  
  const consultantLeads = leads.filter(lead => lead.audience === 'CONSULTANT');
  const availableLeads = consultantLeads.filter(lead => !lead.acceptedByUserId);
  const acceptedLeads = consultantLeads.filter(lead => lead.acceptedByUserId);
  
  const wallet = wallets.find(w => w.userId === 'user-consultant-1') || { balance: 0 };
  
  const mockClients = [ 
    { id: 1, name: "Innovate Pte. Ltd.", grant: "EDG", status: "Proposal Review", deadline: "3 days", appId: 2, probability: 75 }, 
    { id: 2, name: "Global Exports Co.", grant: "MRA Grant", status: "Awaiting Docs", deadline: "5 days", appId: 4, probability: 45 }, 
  ];

  const performance = { 
    winRate: 92, 
    avgTimeToSubmit: 14, 
    totalFundingSecured: 1250000 
  };

  return (
    <div className="space-y-6 md:space-y-8 animate-fade-in">
      <PageHeader title="Consultant Dashboard" />
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <div className="flex items-center justify-between">
            <h3 className="font-semibold text-slate-600 dark:text-slate-300">Active Clients</h3>
            <Users className="text-purple-500" />
          </div>
          <p className="text-4xl font-bold text-purple-600 dark:text-purple-400 mt-4">
            {mockClients.length}
          </p>
        </Card>
        
        <Card>
          <div className="flex items-center justify-between">
            <h3 className="font-semibold text-slate-600 dark:text-slate-300">Win Rate</h3>
            <Award className="text-teal-500" />
          </div>
          <p className="text-4xl font-bold text-teal-600 dark:text-teal-400 mt-4">
            {performance.winRate}%
          </p>
        </Card>
        
        <Card>
          <div className="flex items-center justify-between">
            <h3 className="font-semibold text-slate-600 dark:text-slate-300">Lead Credits</h3>
            <Wallet className="text-green-500" />
          </div>
          <p className="text-4xl font-bold text-green-600 dark:text-green-400 mt-4">
            {wallet.balance}
          </p>
        </Card>
        
        <Card 
          onClick={() => onViewLead('marketplace')} 
          className="bg-blue-50 dark:bg-blue-900/30 border-blue-200 dark:border-blue-800/50 cursor-pointer"
        >
          <div className="flex items-center justify-between">
            <h3 className="font-bold text-blue-800 dark:text-blue-200">Lead Marketplace</h3>
            <ShoppingCart className="text-blue-500" />
          </div>
          <p className="text-4xl font-bold text-blue-600 dark:text-blue-400 mt-4">
            {availableLeads.length}
          </p>
          <p className="text-sm text-blue-500 dark:text-blue-400 hover:underline mt-1">
            New Leads Available →
          </p>
        </Card>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-bold text-slate-800 dark:text-slate-200">Client Pipeline</h3>
            <button 
              onClick={() => setShowAddLeadModal(true)} 
              className="flex items-center gap-2 bg-indigo-600 text-white px-3 py-2 rounded-lg text-sm font-semibold hover:bg-indigo-700"
            >
              <PlusCircle size={16} /> Add Lead
            </button>
          </div>
          <div className="space-y-2">
            {mockClients.map(client => (
              <div 
                key={client.id} 
                onClick={() => onViewLead(client.appId.toString())} 
                className="p-4 rounded-lg border border-slate-200 dark:border-slate-700/80 hover:bg-slate-50 dark:hover:bg-slate-700/50 transition-colors cursor-pointer flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4"
              >
                <div>
                  <p className="font-semibold text-slate-700 dark:text-slate-200">
                    {client.name} ({client.grant})
                  </p>
                  <div className="mt-1">
                    <LeadScoreBadge score={client.probability ?? 55} />
                  </div>
                </div>
                <div className="flex items-center gap-4">
                  <span className="text-sm font-medium text-red-500">
                    {client.deadline || 'N/A'}
                  </span>
                  <button className="font-semibold text-indigo-600 dark:text-indigo-400 hover:underline text-sm">
                    Manage
                  </button>
                </div>
              </div>
            ))}
          </div>
        </Card>
        
        <Card>
          <h3 className="text-lg font-bold text-slate-800 dark:text-slate-200 mb-4">My Performance</h3>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <p className="text-slate-600 dark:text-slate-300">Avg. Time to Submit</p>
              <p className="font-bold text-slate-800 dark:text-slate-100">
                {performance.avgTimeToSubmit} days
              </p>
            </div>
            <div className="flex justify-between items-center">
              <p className="text-slate-600 dark:text-slate-300">Total Funding Secured</p>
              <p className="font-bold text-slate-800 dark:text-slate-100">
                ${performance.totalFundingSecured.toLocaleString()}
              </p>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
};
[ConsultantDashboard.tsx: end]

File: features/dashboard/sme/SmeDashboard.tsx
[SmeDashboard.tsx: start]
import React from 'react';
import { CheckCircle, Circle, BrainCircuit, ArrowRight } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { Card } from '../../../components/common/Card';
import { MetricTiles } from '../../../components/common/MetricTiles';
import { Pipeline } from '../../../components/common/Pipeline';
import { Launchpad } from '../../../components/common/Launchpad';

interface SmeDashboardProps {
  onStartNewOpportunity: () => void;
}

const ReadinessStep: React.FC<{ text: string; status: 'complete' | 'in_progress' | 'incomplete' }> = ({ text, status }) => {
  const statusMap = {
    complete: { icon: <CheckCircle size={16} className="text-emerald-500" /> },
    in_progress: { icon: <Circle size={16} className="text-amber-500 fill-amber-500" /> },
    incomplete: { icon: <Circle size={16} className="text-slate-400 fill-slate-400" /> },
  };
  
  return (
    <div className="flex items-center gap-3 text-sm text-slate-600">
      {statusMap[status].icon} {text}
    </div>
  );
};

export const SmeDashboard: React.FC<SmeDashboardProps> = ({ onStartNewOpportunity }) => {
  const navigate = useNavigate();
  
  const handleStartNewOpportunity = () => {
    navigate('/sme/builder');
  };
  return (
    <div className="space-y-6 animate-fade-in">
      <section>
        <h2 className="text-lg font-semibold text-slate-900 mb-4">My Business Snapshot</h2>
        <MetricTiles />
      </section>
      
      <section>
        <h2 className="text-lg font-semibold text-slate-900 mb-4">Tailored to your company's DNA</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {[
            {name: "Enterprise Development Grant (EDG)", reason: "Your revenue band & industry qualify for 80% support."}, 
            {name: "Productivity Solutions Grant (PSG)", reason: "Pre-approved IT solutions match your sector."}, 
            {name: "Market Readiness Assistance (MRA)", reason: "Perfect for your planned overseas expansion."}
          ].map(opp => (
            <Card key={opp.name} className="bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200/50 hover:border-blue-300/50">
              <h3 className="font-semibold text-slate-900 text-sm">{opp.name}</h3>
              <p className="text-sm text-slate-600 mt-2 leading-relaxed">{opp.reason}</p>
              <button className="mt-4 text-sm font-medium text-blue-600 hover:text-blue-700 hover:underline flex items-center gap-1 transition-colors">
                Launch Opportunity <ArrowRight size={14}/>
              </button>
            </Card>
          ))}
        </div>
      </section>

      <section>
        <Launchpad onStartNewOpportunity={handleStartNewOpportunity} />
      </section>
      
      <div className="grid grid-cols-1 xl:grid-cols-3 gap-6 items-start">
        <main className="xl:col-span-2">
          <h2 className="text-lg font-semibold text-slate-900 mb-4">Opportunity Pipeline</h2>
          <Pipeline />
        </main>
        
        <aside className="xl:col-span-1 space-y-6">
          <Card>
            <h3 className="text-lg font-semibold text-slate-900 mb-4">Active Tasks</h3>
            <div className="space-y-3">
              <p className="text-sm text-slate-600">Vendor A awaiting reply <span className="font-medium text-red-600">(2 days left)</span></p>
              <p className="text-sm text-slate-600">Consultant proposal ready for review</p>
              <p className="text-sm text-slate-600">Grant checklist 60% complete</p>
            </div>
            <button className="mt-4 text-sm font-medium text-blue-600 hover:text-blue-700 hover:underline w-full text-left transition-colors">View All Tasks →</button>
          </Card>
          
          <Card>
            <h3 className="text-lg font-semibold text-slate-900 mb-4">Grant Readiness</h3>
            <div className="w-full bg-slate-200 rounded-full h-2 mb-4">
              <div className="bg-emerald-500 h-2 rounded-full transition-all duration-300" style={{width: "60%"}}></div>
            </div>
            <div className="space-y-2">
              <ReadinessStep text="Company Profile" status="complete"/>
              <ReadinessStep text="Quotations" status="complete"/>
              <ReadinessStep text="Implementation Plan" status="in_progress"/>
              <ReadinessStep text="Evidence" status="incomplete"/>
            </div>
            <button className="mt-4 bg-slate-100 w-full py-2 rounded-lg font-medium text-slate-700 hover:bg-slate-200 transition-colors">Open Checklist</button>
          </Card>
          
          <Card>
            <h3 className="text-lg font-semibold text-slate-900 mb-2">Credits & Plan</h3>
            <p className="text-slate-600"><span className="text-2xl font-bold text-slate-900">12</span> credits remaining</p>
            <p className="text-xs text-slate-500">Next renewal: Nov 30 2025</p>
            <button className="mt-4 bg-blue-50 w-full py-2 rounded-lg font-medium text-blue-700 hover:bg-blue-100 transition-colors">Buy More Credits</button>
          </Card>
        </aside>
      </div>
      
      <footer className="bg-slate-50 p-6 rounded-xl flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 border border-slate-200/60">
        <div className="flex items-start gap-3">
          <BrainCircuit className="w-6 h-6 text-indigo-600 flex-shrink-0 mt-1" />
          <p className="text-sm text-slate-600">
            <span className="font-semibold text-slate-900">SmartAI Insight:</span> Based on similar SMEs, projects between S$50K–100K saw 3× faster approval.
          </p>
        </div>
        <button className="font-medium text-indigo-600 hover:text-indigo-700 hover:underline text-sm flex-shrink-0 transition-colors">View Insights</button>
      </footer>
    </div>
  );
};
[SmeDashboard.tsx: end]

File: features/dashboard/vendor/VendorDashboard.tsx
[VendorDashboard.tsx: start]
import React, { useState } from 'react';
import { Users, Award, Wallet, ShoppingCart, PlusCircle } from 'lucide-react';
import { Card } from '../../../components/common/Card';
import { PageHeader } from '../../../components/common/PageHeader';
import { StatusBadge } from '../../../components/common/StatusBadge';
import { useAppStore } from '../../../state/store';

interface VendorDashboardProps {
  onViewLead: (leadId: string) => void;
}

export const VendorDashboard: React.FC<VendorDashboardProps> = ({ onViewLead }) => {
  const { leads, wallets, currentPersona } = useAppStore();
  const [showAddLeadModal, setShowAddLeadModal] = useState(false);
  
  const vendorLeads = leads.filter(lead => lead.audience === 'VENDOR');
  const availableLeads = vendorLeads.filter(lead => !lead.acceptedByUserId);
  const acceptedLeads = vendorLeads.filter(lead => lead.acceptedByUserId);
  
  const wallet = wallets.find(w => w.userId === 'user-vendor-1') || { balance: 0 };
  
  const mockQuoteRequests = [
    { id: 1, sme: "Innovate Pte. Ltd.", grant: "EDG", service: "Digital Marketing Campaign", status: "Pending", amount: 15000, feedback: null },
    { id: 2, sme: "Tech Solutions Inc.", grant: "EDG", service: "Digital Marketing Campaign", status: "Submitted", amount: 14500, feedback: null },
    { id: 3, sme: "Creative Minds Agency", grant: "EDG", service: "Digital Marketing Campaign", status: "Accepted", amount: 15200, feedback: "Great value and clear deliverables." }
  ];

  const performance = { 
    engagementRate: 25, 
    avgQuoteTime: 2, 
    totalContractsValue: 250000 
  };

  return (
    <div className="space-y-6 md:space-y-8 animate-fade-in">
      <PageHeader title="Vendor Dashboard" />
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <div className="flex items-center justify-between">
            <h3 className="font-semibold text-slate-600 dark:text-slate-300">Quote Requests</h3>
            <Users className="text-green-500" />
          </div>
          <p className="text-4xl font-bold text-green-600 dark:text-green-400 mt-4">
            {mockQuoteRequests.length}
          </p>
        </Card>
        
        <Card>
          <div className="flex items-center justify-between">
            <h3 className="font-semibold text-slate-600 dark:text-slate-300">Engagement Rate</h3>
            <Award className="text-teal-500" />
          </div>
          <p className="text-4xl font-bold text-teal-600 dark:text-teal-400 mt-4">
            {performance.engagementRate}%
          </p>
        </Card>
        
        <Card>
          <div className="flex items-center justify-between">
            <h3 className="font-semibold text-slate-600 dark:text-slate-300">Lead Credits</h3>
            <Wallet className="text-green-500" />
          </div>
          <p className="text-4xl font-bold text-green-600 dark:text-green-400 mt-4">
            {wallet.balance}
          </p>
        </Card>
        
        <Card 
          onClick={() => onViewLead('marketplace')} 
          className="bg-blue-50 dark:bg-blue-900/30 border-blue-200 dark:border-blue-800/50 cursor-pointer"
        >
          <div className="flex items-center justify-between">
            <h3 className="font-bold text-blue-800 dark:text-blue-200">Lead Marketplace</h3>
            <ShoppingCart className="text-blue-500" />
          </div>
          <p className="text-4xl font-bold text-blue-600 dark:text-blue-400 mt-4">
            {availableLeads.length}
          </p>
          <p className="text-sm text-blue-500 dark:text-blue-400 hover:underline mt-1">
            New Leads Available →
          </p>
        </Card>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-bold text-slate-800 dark:text-slate-200">Quote Pipeline</h3>
            <button 
              onClick={() => setShowAddLeadModal(true)} 
              className="flex items-center gap-2 bg-indigo-600 text-white px-3 py-2 rounded-lg text-sm font-semibold hover:bg-indigo-700"
            >
              <PlusCircle size={16} /> Add Lead
            </button>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full text-sm text-left">
              <thead className="text-xs text-slate-500 dark:text-slate-400 uppercase bg-slate-50 dark:bg-slate-700/50">
                <tr>
                  <th className="px-4 py-3 font-medium">SME</th>
                  <th className="px-4 py-3 font-medium">Service</th>
                  <th className="px-4 py-3 font-medium">Status</th>
                  <th className="px-4 py-3 font-medium">Feedback</th>
                  <th className="px-4 py-3 font-medium">Action</th>
                </tr>
              </thead>
              <tbody>
                {mockQuoteRequests.map(req => (
                  <tr key={req.id} className="border-b border-slate-200 dark:border-slate-700">
                    <td className="px-4 py-3 font-medium text-slate-800 dark:text-white">
                      {req.sme}
                    </td>
                    <td className="px-4 py-3 text-slate-600 dark:text-slate-300">
                      {req.service}
                    </td>
                    <td className="px-4 py-3">
                      <StatusBadge status={req.status} type="quote"/>
                    </td>
                    <td className="px-4 py-3 text-slate-500 dark:text-slate-400 italic">
                      {req.feedback || 'N/A'}
                    </td>
                    <td className="px-4 py-3">
                      <button 
                        onClick={() => onViewLead(req.id.toString())} 
                        className="font-semibold text-indigo-600 dark:text-indigo-400 hover:underline"
                      >
                        View
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </Card>
        
        <Card>
          <h3 className="text-lg font-bold text-slate-800 dark:text-slate-200 mb-4">My Performance</h3>
          <div className="space-y-3">
            <div className="flex justify-between items-center">
              <p className="text-slate-600 dark:text-slate-300">Avg. Quote Time</p>
              <p className="font-bold text-slate-800 dark:text-slate-100">
                {performance.avgQuoteTime} days
              </p>
            </div>
            <div className="flex justify-between items-center">
              <p className="text-slate-600 dark:text-slate-300">Total Contracts Value</p>
              <p className="font-bold text-slate-800 dark:text-slate-100">
                ${performance.totalContractsValue.toLocaleString()}
              </p>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
};
[VendorDashboard.tsx: end]

File: features/leads/ConsultantLeadInbox.tsx
[ConsultantLeadInbox.tsx: start]
import React, { useState } from 'react';
import { Wallet, Filter, ShoppingCart } from 'lucide-react';
import { Card } from '../../components/common/Card';
import { PageHeader } from '../../components/common/PageHeader';
import { LeadScoreBadge } from '../../components/common/LeadScoreBadge';
import { useAppStore } from '../../state/store';
import { mockApi } from '../../mocks/api';

export const ConsultantLeadInbox: React.FC = () => {
  const { leads, wallets } = useAppStore();
  const [unlockingId, setUnlockingId] = useState<string | null>(null);
  
  const consultantLeads = leads.filter(lead => lead.audience === 'CONSULTANT');
  const availableLeads = consultantLeads.filter(lead => !lead.acceptedByUserId);
  const acceptedLeads = consultantLeads.filter(lead => lead.acceptedByUserId);
  
  const wallet = wallets.find(w => w.userId === 'user-consultant-1') || { balance: 0 };

  const unlockContact = async (leadId: string) => {
    setUnlockingId(leadId);
    try {
      await mockApi.acceptLead(leadId, 'user-consultant-1');
    } catch (error) {
      console.error('Failed to accept lead:', error);
    } finally {
      setUnlockingId(null);
    }
  };

  return (
    <div className="animate-fade-in">
      <PageHeader 
        title="Lead Marketplace" 
        subtitle="Purchase qualified leads to grow your business."
      >
        <div className="mt-4 md:mt-0 flex items-center gap-4 p-3 rounded-lg bg-green-100 dark:bg-green-500/20">
          <Wallet className="text-green-700 dark:text-green-300" />
          <span className="font-bold text-green-800 dark:text-green-200">
            {wallet.balance} Credits Available
          </span>
          <button className="bg-green-600 text-white px-3 py-1 text-sm rounded-md hover:bg-green-700">
            +
          </button>
        </div>
      </PageHeader>
      
      <div className="mb-6 p-4 bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 flex flex-wrap items-center gap-4">
        <h3 className="font-semibold text-slate-700 dark:text-slate-200 flex items-center gap-2">
          <Filter size={18}/> Filters:
        </h3>
        <select className="bg-slate-100 dark:bg-slate-700 p-2 rounded-md text-sm border border-slate-200 dark:border-slate-600">
          <option>Sector: All</option>
          <option>F&B</option>
          <option>Logistics</option>
        </select>
        <select className="bg-slate-100 dark:bg-slate-700 p-2 rounded-md text-sm border border-slate-200 dark:border-slate-600">
          <option>Type: All</option>
          <option>Grant</option>
          <option>Non-grant</option>
        </select>
        <select className="bg-slate-100 dark:bg-slate-700 p-2 rounded-md text-sm border border-slate-200 dark:border-slate-600">
          <option>Budget: All</option>
          <option>$10k-20k</option>
          <option>$20k+</option>
        </select>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {availableLeads.length > 0 ? availableLeads.map(lead => (
          <Card key={lead.id} className="flex flex-col">
            <div className="flex-grow">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-bold text-slate-800 dark:text-slate-100">
                  F&B Company Opportunity
                </h3>
                <LeadScoreBadge score={lead.qualificationScore} />
              </div>
              <p className="text-sm text-slate-500 dark:text-slate-400 mt-1">
                Interest: {lead.maskedPreview.grantTag || 'General'}
              </p>
              <p className="mt-3 text-slate-600 dark:text-slate-300">
                {lead.maskedPreview.summary}
              </p>
              <div className="mt-3 text-sm text-slate-500 dark:text-slate-400">
                <p>Budget: S${lead.maskedPreview.budgetBand[0].toLocaleString()} - S${lead.maskedPreview.budgetBand[1].toLocaleString()}</p>
                <p>Urgency: {lead.maskedPreview.urgency}</p>
              </div>
            </div>
            <button
              disabled={unlockingId === lead.id || wallet.balance < lead.priceCredits}
              onClick={() => unlockContact(lead.id)}
              className={`w-full mt-4 px-4 py-2 rounded-lg font-semibold transition-colors flex items-center justify-center gap-2
                ${unlockingId === lead.id 
                  ? 'bg-slate-300 dark:bg-slate-700 text-slate-500 cursor-wait' 
                  : wallet.balance < lead.priceCredits
                  ? 'bg-red-300 dark:bg-red-700 text-red-500 cursor-not-allowed'
                  : 'bg-indigo-600 text-white hover:bg-indigo-700'
                }`}
            >
              <ShoppingCart size={18} />
              {unlockingId === lead.id 
                ? 'Processing…' 
                : wallet.balance < lead.priceCredits
                ? 'Insufficient Credits'
                : `Accept Lead (${lead.priceCredits} credit${lead.priceCredits > 1 ? 's' : ''})`
              }
            </button>
          </Card>
        )) : (
          <Card className="md:col-span-2 lg:col-span-3 text-center">
            <h3 className="text-lg font-bold text-slate-700 dark:text-slate-200">No Leads Available</h3>
            <p className="text-slate-500 dark:text-slate-400 mt-1">Please check back later for new opportunities.</p>
          </Card>
        )}
      </div>
    </div>
  );
};
[ConsultantLeadInbox.tsx: end]

File: features/leads/VendorLeadInbox.tsx
[VendorLeadInbox.tsx: start]
import React, { useState } from 'react';
import { Wallet, Filter, ShoppingCart } from 'lucide-react';
import { Card } from '../../components/common/Card';
import { PageHeader } from '../../components/common/PageHeader';
import { LeadScoreBadge } from '../../components/common/LeadScoreBadge';
import { useAppStore } from '../../state/store';
import { mockApi } from '../../mocks/api';

export const VendorLeadInbox: React.FC = () => {
  const { leads, wallets, currentPersona } = useAppStore();
  const [unlockingId, setUnlockingId] = useState<string | null>(null);
  
  const vendorLeads = leads.filter(lead => lead.audience === 'VENDOR');
  const availableLeads = vendorLeads.filter(lead => !lead.acceptedByUserId);
  const acceptedLeads = vendorLeads.filter(lead => lead.acceptedByUserId);
  
  const wallet = wallets.find(w => w.userId === 'user-vendor-1') || { balance: 0 };

  const unlockContact = async (leadId: string) => {
    setUnlockingId(leadId);
    try {
      await mockApi.acceptLead(leadId, 'user-vendor-1');
    } catch (error) {
      console.error('Failed to accept lead:', error);
    } finally {
      setUnlockingId(null);
    }
  };

  return (
    <div className="animate-fade-in">
      <PageHeader 
        title="Lead Marketplace" 
        subtitle="Purchase qualified leads to grow your business."
      >
        <div className="mt-4 md:mt-0 flex items-center gap-4 p-3 rounded-lg bg-green-100 dark:bg-green-500/20">
          <Wallet className="text-green-700 dark:text-green-300" />
          <span className="font-bold text-green-800 dark:text-green-200">
            {wallet.balance} Credits Available
          </span>
          <button className="bg-green-600 text-white px-3 py-1 text-sm rounded-md hover:bg-green-700">
            +
          </button>
        </div>
      </PageHeader>
      
      <div className="mb-6 p-4 bg-white dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700 flex flex-wrap items-center gap-4">
        <h3 className="font-semibold text-slate-700 dark:text-slate-200 flex items-center gap-2">
          <Filter size={18}/> Filters:
        </h3>
        <select className="bg-slate-100 dark:bg-slate-700 p-2 rounded-md text-sm border border-slate-200 dark:border-slate-600">
          <option>Sector: All</option>
          <option>F&B</option>
          <option>Logistics</option>
        </select>
        <select className="bg-slate-100 dark:bg-slate-700 p-2 rounded-md text-sm border border-slate-200 dark:border-slate-600">
          <option>Type: All</option>
          <option>Grant</option>
          <option>Non-grant</option>
        </select>
        <select className="bg-slate-100 dark:bg-slate-700 p-2 rounded-md text-sm border border-slate-200 dark:border-slate-600">
          <option>Budget: All</option>
          <option>$10k-20k</option>
          <option>$20k+</option>
        </select>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {availableLeads.length > 0 ? availableLeads.map(lead => (
          <Card key={lead.id} className="flex flex-col">
            <div className="flex-grow">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-bold text-slate-800 dark:text-slate-100">
                  F&B Company Opportunity
                </h3>
                <LeadScoreBadge score={lead.qualificationScore} />
              </div>
              <p className="text-sm text-slate-500 dark:text-slate-400 mt-1">
                Interest: {lead.maskedPreview.grantTag || 'General'}
              </p>
              <p className="mt-3 text-slate-600 dark:text-slate-300">
                {lead.maskedPreview.summary}
              </p>
              <div className="mt-3 text-sm text-slate-500 dark:text-slate-400">
                <p>Budget: S${lead.maskedPreview.budgetBand[0].toLocaleString()} - S${lead.maskedPreview.budgetBand[1].toLocaleString()}</p>
                <p>Urgency: {lead.maskedPreview.urgency}</p>
              </div>
            </div>
            <button
              disabled={unlockingId === lead.id || wallet.balance < lead.priceCredits}
              onClick={() => unlockContact(lead.id)}
              className={`w-full mt-4 px-4 py-2 rounded-lg font-semibold transition-colors flex items-center justify-center gap-2
                ${unlockingId === lead.id 
                  ? 'bg-slate-300 dark:bg-slate-700 text-slate-500 cursor-wait' 
                  : wallet.balance < lead.priceCredits
                  ? 'bg-red-300 dark:bg-red-700 text-red-500 cursor-not-allowed'
                  : 'bg-indigo-600 text-white hover:bg-indigo-700'
                }`}
            >
              <ShoppingCart size={18} />
              {unlockingId === lead.id 
                ? 'Processing…' 
                : wallet.balance < lead.priceCredits
                ? 'Insufficient Credits'
                : `Accept Lead (${lead.priceCredits} credit${lead.priceCredits > 1 ? 's' : ''})`
              }
            </button>
          </Card>
        )) : (
          <Card className="md:col-span-2 lg:col-span-3 text-center">
            <h3 className="text-lg font-bold text-slate-700 dark:text-slate-200">No Leads Available</h3>
            <p className="text-slate-500 dark:text-slate-400 mt-1">Please check back later for new opportunities.</p>
          </Card>
        )}
      </div>
    </div>
  );
};
[VendorLeadInbox.tsx: end]

File: features/opportunityBuilder/comparison/ComparisonView.tsx
[ComparisonView.tsx: start]
import React, { useState } from 'react';
import { ArrowLeft, Check, Star, Award } from 'lucide-react';
import { Card } from '../../../components/common/Card';
import { PageHeader } from '../../../components/common/PageHeader';
import { useAppStore } from '../../../state/store';
import { mockApi } from '../../../mocks/api';

interface ComparisonViewProps {
  reqDocId: string;
  onBack: () => void;
}

const ProposalCard: React.FC<{
  proposal: any;
  isSelected: boolean;
  onSelect: () => void;
  onAward: () => void;
}> = ({ proposal, isSelected, onSelect, onAward }) => (
  <Card className={`cursor-pointer transition-all ${isSelected ? 'border-indigo-500 bg-indigo-50 dark:bg-indigo-900/30' : 'hover:border-slate-300 dark:hover:border-slate-600'}`}>
    <div className="flex items-start justify-between mb-4">
      <div className="flex-1">
        <h3 className="text-lg font-semibold text-slate-800 dark:text-slate-200">{proposal.name}</h3>
        <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">{proposal.type}</p>
      </div>
      <div className="flex items-center gap-2">
        {proposal.isTopMatch && (
          <span className="px-2 py-1 text-xs font-bold bg-green-100 text-green-700 dark:bg-green-500/20 dark:text-green-300 rounded-full">
            Top Match
          </span>
        )}
        {isSelected && (
          <div className="bg-indigo-600 text-white rounded-full p-1">
            <Check size={16} />
          </div>
        )}
      </div>
    </div>
    
    <div className="space-y-3">
      <div>
        <h4 className="text-sm font-medium text-slate-700 dark:text-slate-300">Scope Summary</h4>
        <p className="text-sm text-slate-600 dark:text-slate-400 mt-1">{proposal.summary}</p>
      </div>
      
      <div className="grid grid-cols-2 gap-4 text-sm">
        <div>
          <span className="text-slate-500 dark:text-slate-400">Timeline:</span>
          <p className="font-semibold text-slate-800 dark:text-slate-200">{proposal.timeline}</p>
        </div>
        <div>
          <span className="text-slate-500 dark:text-slate-400">Price:</span>
          <p className="font-semibold text-slate-800 dark:text-slate-200">{proposal.price}</p>
        </div>
      </div>
      
      <div>
        <h4 className="text-sm font-medium text-slate-700 dark:text-slate-300">Key Features</h4>
        <ul className="text-sm text-slate-600 dark:text-slate-400 mt-1 space-y-1">
          {proposal.features.map((feature: string, index: number) => (
            <li key={index} className="flex items-center gap-2">
              <Check size={12} className="text-green-500 flex-shrink-0" />
              {feature}
            </li>
          ))}
        </ul>
      </div>
      
      <div className="flex gap-2 pt-4 border-t border-slate-200 dark:border-slate-700">
        <button
          onClick={onSelect}
          className={`flex-1 px-3 py-2 text-sm font-semibold rounded-lg transition-colors ${
            isSelected
              ? 'bg-indigo-100 text-indigo-700 dark:bg-indigo-500/20 dark:text-indigo-300'
              : 'bg-slate-100 text-slate-700 dark:bg-slate-700 dark:text-slate-300 hover:bg-slate-200 dark:hover:bg-slate-600'
          }`}
        >
          {isSelected ? 'Selected' : 'Select'}
        </button>
        <button
          onClick={onAward}
          className="flex-1 px-3 py-2 text-sm font-semibold bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center gap-1"
        >
          <Award size={14} />
          Award
        </button>
      </div>
    </div>
  </Card>
);

export const ComparisonView: React.FC<ComparisonViewProps> = ({ reqDocId, onBack }) => {
  const { reqDocs, currentPersona } = useAppStore();
  const [selectedProposals, setSelectedProposals] = useState<string[]>([]);
  
  const reqDoc = reqDocs.find(rd => rd.id === reqDocId);
  
  // Mock data for comparison
  const mockProposals = [
    {
      id: 'prop-1',
      name: 'Acme ERP Solutions',
      type: 'Vendor Proposal',
      summary: 'Comprehensive cloud ERP implementation with 24/7 support and training.',
      timeline: '3-4 months',
      price: 'S$22,000 - S$25,000',
      features: ['PSG Pre-approved', 'F&B Industry Experience', '24/7 Support', 'Training Included'],
      isTopMatch: true
    },
    {
      id: 'prop-2',
      name: 'Nova Cloud Systems',
      type: 'Vendor Proposal',
      summary: 'Modern cloud-native ERP with advanced analytics and mobile access.',
      timeline: '2-3 months',
      price: 'S$18,000 - S$22,000',
      features: ['Cloud-Native', 'Advanced Analytics', 'Mobile App', 'API Integration'],
      isTopMatch: false
    },
    {
      id: 'prop-3',
      name: 'Carter Advisory',
      type: 'Consultant Proposal',
      summary: 'End-to-end grant application support with vendor management and compliance.',
      timeline: '4-6 months',
      price: 'S$8,000 - S$12,000',
      features: ['Grant Application', 'Vendor Management', 'Compliance Support', '92% Success Rate'],
      isTopMatch: true
    }
  ];

  const toggleProposal = (proposalId: string) => {
    setSelectedProposals(prev => 
      prev.includes(proposalId) 
        ? prev.filter(id => id !== proposalId)
        : [...prev, proposalId]
    );
  };

  const handleAward = async (proposalId: string) => {
    const proposal = mockProposals.find(p => p.id === proposalId);
    if (proposal) {
      if (proposal.type === 'Vendor Proposal') {
        await mockApi.awardVendor(reqDocId, 'user-vendor-1');
      } else {
        await mockApi.awardConsultant(reqDocId, 'user-consultant-1');
      }
    }
  };

  if (!reqDoc) {
    return (
      <div className="max-w-6xl mx-auto animate-fade-in">
        <Card className="text-center py-12">
          <h2 className="text-xl font-bold text-slate-800 dark:text-slate-200 mb-2">Opportunity Not Found</h2>
          <p className="text-slate-600 dark:text-slate-400 mb-4">The requested opportunity could not be found.</p>
          <button
            onClick={onBack}
            className="bg-indigo-600 text-white px-6 py-2 rounded-lg font-semibold hover:bg-indigo-700"
          >
            Back to Dashboard
          </button>
        </Card>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto animate-fade-in">
      <button 
        onClick={onBack} 
        className="flex items-center gap-2 mb-6 text-sm font-semibold text-indigo-600 dark:text-indigo-400 hover:underline"
      >
        <ArrowLeft size={16} />Back to Dashboard
      </button>
      
      <PageHeader 
        title="Compare Proposals" 
        subtitle={`Review and compare proposals for: ${reqDoc.goal}`}
      />

      <div className="mb-6 p-4 bg-blue-50 dark:bg-blue-900/30 rounded-lg border border-blue-200 dark:border-blue-800">
        <div className="flex items-center gap-2">
          <Star className="text-blue-600 dark:text-blue-400" size={20} />
          <p className="text-sm text-blue-700 dark:text-blue-300">
            <span className="font-semibold">Tip:</span> Compare proposals side-by-side and select the best match for your project. 
            You can select multiple proposals for detailed comparison.
          </p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
        {mockProposals.map(proposal => (
          <ProposalCard
            key={proposal.id}
            proposal={proposal}
            isSelected={selectedProposals.includes(proposal.id)}
            onSelect={() => toggleProposal(proposal.id)}
            onAward={() => handleAward(proposal.id)}
          />
        ))}
      </div>

      {selectedProposals.length > 0 && (
        <Card className="mt-8 bg-green-50 dark:bg-green-900/30 border-green-200 dark:border-green-800">
          <h3 className="font-semibold text-green-800 dark:text-green-200 mb-2">
            Selected for Comparison ({selectedProposals.length})
          </h3>
          <p className="text-sm text-green-700 dark:text-green-300">
            You have selected {selectedProposals.length} proposal(s) for detailed comparison. 
            Use the "Award" button on individual proposals to make your final decision.
          </p>
        </Card>
      )}
    </div>
  );
};
[ComparisonView.tsx: end]

File: features/opportunityBuilder/sme/CompareDrawer.tsx
[CompareDrawer.tsx: start]
import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, CheckCircle, TrendingUp, Users, DollarSign, Clock, ArrowRight } from 'lucide-react';
import { TRHLSOption } from '../../../state/types';
import { formatImpact, getGrantBadgeColor, getImpactColor } from '../../../state/trhls/impact';

interface CompareDrawerProps {
  isOpen: boolean;
  onClose: () => void;
  selected: TRHLSOption[];
  onProceed: () => void;
}

const ImpactMetric: React.FC<{ 
  label: string; 
  value: string; 
  icon: React.ElementType;
  color: string;
  index: number;
}> = ({ label, value, icon: Icon, color, index }) => (
  <motion.div
    initial={{ opacity: 0, y: 10 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ delay: index * 0.1 }}
    className="bg-white rounded-lg p-3 border border-slate-200"
  >
    <div className="flex items-center gap-2 mb-1">
      <Icon size={14} className={color} />
      <span className="text-xs font-medium text-slate-600">{label}</span>
    </div>
    <div className={`text-lg font-bold ${color}`}>{value}</div>
  </motion.div>
);

const SolutionCard: React.FC<{ 
  solution: TRHLSOption; 
  index: number;
}> = ({ solution, index }) => {
  const impactMetrics = formatImpact(solution);
  const grantBadgeColor = getGrantBadgeColor(solution.grantTag);
  
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: index * 0.1 }}
      className="bg-white rounded-xl border border-slate-200 p-6 shadow-sm"
    >
      {/* Header */}
      <div className="mb-4">
        <div className="flex items-start justify-between mb-2">
          <h3 className="font-semibold text-slate-900 text-sm leading-tight">{solution.name}</h3>
          <span className={`px-2 py-1 rounded-full text-xs font-medium border ${grantBadgeColor}`}>
            {solution.grantTag === 'NON_GRANT' ? 'Self-Funded' : solution.grantTag}
          </span>
        </div>
        <p className="text-xs text-slate-600 mb-3">{solution.whyFit}</p>
      </div>

      {/* Why Recommended */}
      <div className="mb-4">
        <h4 className="text-xs font-medium text-slate-700 mb-2">Why you're seeing this:</h4>
        <div className="flex flex-wrap gap-1">
          {solution.rationaleSignals?.map((signal: string, idx: number) => (
            <motion.span
              key={idx}
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.2 + idx * 0.05 }}
              className="px-2 py-1 bg-slate-100 text-slate-600 text-xs rounded-full"
            >
              {signal}
            </motion.span>
          )) || []}
        </div>
      </div>

      {/* Business Impact */}
      <div className="mb-4">
        <h4 className="text-xs font-medium text-slate-700 mb-3">Business Impact:</h4>
        <div className="grid grid-cols-2 gap-2">
          {impactMetrics.map((metric, idx) => {
            const iconMap = {
              'Revenue Lift': TrendingUp,
              'New Leads / mo': Users,
              'CAC Change': DollarSign,
              'Time to First Lead': Clock
            };
            const Icon = iconMap[metric.label as keyof typeof iconMap] || TrendingUp;
            const color = getImpactColor(
              parseFloat(metric.value.replace('%', '').replace(' wks', '')),
              metric.label.includes('CAC') ? 'cac' : 
              metric.label.includes('Time') ? 'time' :
              metric.label.includes('Revenue') ? 'revenue' : 'leads'
            );
            
            return (
              <ImpactMetric
                key={metric.label}
                label={metric.label}
                value={metric.value}
                icon={Icon}
                color={color}
                index={idx}
              />
            );
          })}
        </div>
      </div>

      {/* Grant Support */}
      {solution.grantTag !== 'NON_GRANT' && (
        <div className="bg-blue-50 rounded-lg p-3 border border-blue-200">
          <h4 className="text-xs font-medium text-blue-800 mb-1">Grant Support:</h4>
          <p className="text-xs text-blue-700">{solution.grantWhy}</p>
        </div>
      )}

      {/* Cost & Duration */}
      <div className="mt-4 pt-3 border-t border-slate-200">
        <div className="flex justify-between text-xs text-slate-600">
          <span>Cost: S${solution.estCostBand[0].toLocaleString()} - S${solution.estCostBand[1].toLocaleString()}</span>
          <span>Duration: {solution.estDurationMonths[0]}-{solution.estDurationMonths[1]} months</span>
        </div>
      </div>
    </motion.div>
  );
};

export const CompareDrawer: React.FC<CompareDrawerProps> = ({ 
  isOpen, 
  onClose, 
  selected, 
  onProceed 
}) => {
  const getGridCols = () => {
    if (selected.length === 1) return 'grid-cols-1';
    if (selected.length === 2) return 'grid-cols-1 md:grid-cols-2';
    return 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3';
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <>
          {/* Backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/50 z-40"
            onClick={onClose}
          />
          
          {/* Drawer */}
          <motion.div
            initial={{ opacity: 0, y: '100%' }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: '100%' }}
            transition={{ duration: 0.4, ease: "easeOut" }}
            className="fixed bottom-0 left-0 right-0 bg-white rounded-t-2xl shadow-2xl z-50 max-h-[90vh] overflow-hidden"
          >
            {/* Header */}
            <div className="sticky top-0 bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-slate-200 px-6 py-4">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-lg font-semibold text-slate-900">Compare Solutions</h2>
                  <p className="text-sm text-slate-600">
                    {selected.length} solution{selected.length > 1 ? 's' : ''} selected
                  </p>
                </div>
                <button
                  onClick={onClose}
                  className="p-2 text-slate-400 hover:text-slate-600 transition-colors"
                >
                  <X size={20} />
                </button>
              </div>
            </div>

            {/* Content */}
            <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
              <div className={`grid ${getGridCols()} gap-6`}>
                {selected.map((solution, index) => (
                  <SolutionCard
                    key={solution.id}
                    solution={solution}
                    index={index}
                  />
                ))}
              </div>
            </div>

            {/* Footer */}
            <div className="sticky bottom-0 bg-white border-t border-slate-200 px-6 py-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2 text-sm text-slate-600">
                  <CheckCircle size={16} className="text-emerald-600" />
                  <span>Ready to proceed with selected solutions</span>
                </div>
                <motion.button
                  onClick={onProceed}
                  className="bg-blue-600 text-white font-medium px-6 py-3 rounded-lg hover:bg-blue-700 transition-all duration-200 flex items-center gap-2 shadow-md hover:shadow-lg"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  Use these for my ReqDoc
                  <ArrowRight size={16} />
                </motion.button>
              </div>
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
};
[CompareDrawer.tsx: end]

File: features/opportunityBuilder/sme/Step1_GoalCapture.tsx
[Step1_GoalCapture.tsx: start]
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ArrowLeft, ArrowRight, Target, TrendingUp, Globe, Zap, Sparkles, CheckCircle, Megaphone, Activity } from 'lucide-react';
import { Card } from '../../../components/common/Card';
import { PageHeader } from '../../../components/common/PageHeader';
import { ChatWindow } from '../../../components/coach/ChatWindow';
import { Alert } from '../../../components/common/Alert';
import { useAppStore } from '../../../state/store';
import { mockApi } from '../../../mocks/api';
import { COACH_CONFIG } from '../../../state/coach/coachConfig';
import { coachActions, initialCoachState, type CoachState } from '../../../state/coach/coachMachine';

interface Step1_GoalCaptureProps {
  onNext: () => void;
  onBack: () => void;
}

// Helper function to detect domain from input
const detectDomain = (input: string): "GROWTH" | "OPERATIONS" | "CAPABILITY" | "SUPPLY" | null => {
  const lowerInput = input.toLowerCase();
  for (const mapping of COACH_CONFIG.keywordMap) {
    if (mapping.keys.some(keyword => lowerInput.includes(keyword))) {
      return mapping.domain as any;
    }
  }
  return null;
};

// Helper function to get clarifier label
const getClarifierLabel = (domain: string, clarifierId: string): string => {
  const clarifiers = COACH_CONFIG.clarifiers[domain as keyof typeof COACH_CONFIG.clarifiers];
  return clarifiers?.find(c => c.id === clarifierId)?.label || clarifierId;
};

const ProgressBar: React.FC<{ currentStep: number; totalSteps: number }> = ({ currentStep, totalSteps }) => (
  <div className="mb-8">
    <div className="flex items-center justify-between mb-2">
      <span className="text-sm font-medium text-slate-600">Step {currentStep} of {totalSteps}</span>
      <span className="text-sm text-slate-500">
        {currentStep === 1 && 'Describe Your Goal'}
        {currentStep === 2 && 'Add Context & Constraints'}
        {currentStep === 3 && 'Grant Relevance & Confidence'}
      </span>
    </div>
    <div className="w-full bg-slate-200 rounded-full h-2">
      <div 
        className="progress-bar h-2 rounded-full transition-all duration-500 ease-out"
        style={{ width: `${(currentStep / totalSteps) * 100}%` }}
      />
    </div>
  </div>
);

const CategoryChip: React.FC<{ 
  label: string; 
  icon: React.ElementType; 
  color: string;
  index: number;
}> = ({ label, icon: Icon, color, index }) => {
  const colorClasses = {
    blue: 'bg-blue-100 text-blue-700 border-blue-200 hover:bg-blue-200',
    green: 'bg-green-100 text-green-700 border-green-200 hover:bg-green-200',
    purple: 'bg-purple-100 text-purple-700 border-purple-200 hover:bg-purple-200'
  };
  
  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.8, y: 10 }}
      animate={{ opacity: 1, scale: 1, y: 0 }}
      transition={{ 
        duration: 0.3, 
        delay: index * 0.1,
        ease: "easeOut"
      }}
      whileHover={{ 
        scale: 1.05, 
        boxShadow: "0 4px 12px rgba(0,0,0,0.1)",
        y: -2
      }}
      className={`flex items-center gap-2 px-3 py-1.5 rounded-full border text-sm font-medium transition-all duration-200 cursor-pointer ${colorClasses[color as keyof typeof colorClasses]}`}
    >
      <Icon size={14} />
      {label}
    </motion.div>
  );
};

const ClarityMeter: React.FC<{ score: number }> = ({ score }) => {
  const [displayScore, setDisplayScore] = useState(0);

  useEffect(() => {
    const timer = setTimeout(() => {
      setDisplayScore(score);
    }, 300);
    return () => clearTimeout(timer);
  }, [score]);

  const getScoreMessage = () => {
    if (score < 50) return 'Low clarity — let\'s refine this together';
    if (score < 80) return 'Good clarity — almost there';
    return 'Excellent clarity — ready for matching';
  };

  return (
    <motion.div 
      className="space-y-2"
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.4, ease: "easeOut" }}
    >
      <div className="flex justify-between items-center">
        <span className="text-sm font-medium text-slate-700">Clarity Score</span>
        <motion.span 
          className="text-sm font-semibold text-blue-600"
          initial={{ scale: 0.8 }}
          animate={{ scale: 1 }}
          transition={{ duration: 0.3, delay: 0.2 }}
        >
          {displayScore}/100
        </motion.span>
      </div>
      <div className="w-full bg-slate-200 rounded-full h-2 overflow-hidden">
        <motion.div 
          className="bg-gradient-to-r from-blue-500 to-blue-600 h-2 rounded-full"
          initial={{ width: 0 }}
          animate={{ width: `${displayScore}%` }}
          transition={{ duration: 0.8, ease: "easeOut", delay: 0.1 }}
        />
      </div>
      <motion.p 
        className="text-xs text-slate-500"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.5 }}
      >
        {getScoreMessage()}
      </motion.p>
    </motion.div>
  );
};

// ReqDoc Preview Component - Commented out as not needed at this stage
// const ReqDocPreview: React.FC<{ data: typeof COACH_CONFIG.reqDocPreview }> = ({ data }) => (
//   <Card className="bg-slate-50 border-slate-200">
//     <h4 className="font-semibold text-slate-900 mb-4 flex items-center gap-2">
//       <Target size={16} />
//       SmartGrant will normalise your input like this (ReqDoc v1).
//     </h4>
//     <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
//       <div>
//         <span className="font-medium text-slate-600">Problem:</span>
//         <p className="text-slate-800 mt-1">{data.problem}</p>
//       </div>
//       <div>
//         <span className="font-medium text-slate-600">Goal:</span>
//         <p className="text-slate-800 mt-1">{data.goal}</p>
//       </div>
//       <div>
//         <span className="font-medium text-slate-600">Domain:</span>
//         <p className="text-slate-800 mt-1">{data.domain}</p>
//       </div>
//       <div>
//         <span className="font-medium text-slate-600">Complexity:</span>
//         <p className="text-slate-800 mt-1">{data.complexity}</p>
//       </div>
//       <div>
//         <span className="font-medium text-slate-600">Industry:</span>
//         <p className="text-slate-800 mt-1">{data.industry}</p>
//       </div>
//       <div>
//         <span className="font-medium text-slate-600">Budget Band:</span>
//         <p className="text-slate-800 mt-1">S${data.budgetBand[0].toLocaleString()} - S${data.budgetBand[1].toLocaleString()}</p>
//       </div>
//       <div>
//         <span className="font-medium text-slate-600">Timeline:</span>
//         <p className="text-slate-800 mt-1">{data.timelineMonths[0]}-{data.timelineMonths[1]} months</p>
//       </div>
//       <div>
//         <span className="font-medium text-slate-600">Qualification Score:</span>
//         <p className="text-slate-800 mt-1">{data.qualificationScore}%</p>
//       </div>
//     </div>
//     
//     <div className="mt-4 pt-4 border-t border-slate-200">
//       <h5 className="font-medium text-slate-700 mb-2">Grant Predictions:</h5>
//       <div className="space-y-2">
//         {data.grantPredictions.map((prediction, index) => (
//           <div key={index} className="flex items-center justify-between p-2 bg-white rounded-lg border border-slate-100">
//             <div className="flex items-center gap-2">
//               <span className="font-medium text-slate-800">{prediction.grant}</span>
//               <span className="text-xs bg-blue-100 text-blue-700 px-2 py-0.5 rounded-full">
//                 {Math.round(prediction.confidence * 100)}% match
//               </span>
//             </div>
//             <button className="p-1 text-slate-400 hover:text-slate-600 transition-colors" title={prediction.reason}>
//               <Target size={14} />
//             </button>
//           </div>
//         ))}
//       </div>
//     </div>
//   </Card>
// );

export const Step1_GoalCapture: React.FC<Step1_GoalCaptureProps> = ({ onNext, onBack }) => {
  const [coachState, setCoachState] = useState<CoachState>(initialCoachState);
  const [isTyping, setIsTyping] = useState(false);
  const [showChat, setShowChat] = useState(false);

  const handleDiagnose = async () => {
    const domain = detectDomain(coachState.input);
    if (domain) {
      setIsTyping(true);
      setShowChat(true);
      
      // Simulate typing delay
      await new Promise(resolve => setTimeout(resolve, 800));
      
      setCoachState(prev => coachActions.diagnose(prev, domain));
      setIsTyping(false);
    }
  };

  const handleChatAction = async (actionId: string) => {
    switch (actionId) {
      case 'acquisition':
      case 'retention':
      case 'visibility':
        setIsTyping(true);
        await new Promise(resolve => setTimeout(resolve, 600));
        const label = getClarifierLabel(coachState.domain!, actionId);
        setCoachState(prev => coachActions.chooseClarifier(prev, actionId, label));
        setIsTyping(false);
        break;
      case 'apply':
        setIsTyping(true);
        await new Promise(resolve => setTimeout(resolve, 500));
        const template = COACH_CONFIG.suggestionTemplates[coachState.domain! as keyof typeof COACH_CONFIG.suggestionTemplates];
        const categories = [...COACH_CONFIG.categoryMap[coachState.domain! as keyof typeof COACH_CONFIG.categoryMap]];
        setCoachState(prev => coachActions.applySuggestion(prev, template.text, categories));
        setIsTyping(false);
        break;
      case 'back':
        setCoachState(prev => coachActions.backToClarifiers(prev));
        break;
    }
  };

  const handleShowPreview = () => {
    setCoachState(prev => coachActions.showPreview(prev));
  };

  const handleSubmit = async () => {
    const reqDocId = await mockApi.createReqDoc({
      companyId: 'sme-001',
      problem: COACH_CONFIG.reqDocPreview.problem,
      goal: COACH_CONFIG.reqDocPreview.goal,
      domain: COACH_CONFIG.reqDocPreview.domain,
      complexity: 'LOW',
      budgetBand: COACH_CONFIG.reqDocPreview.budgetBand as [number, number],
      timelineMonths: COACH_CONFIG.reqDocPreview.timelineMonths as [number, number],
      grantRelevant: true,
      trhlsSelectedIds: [],
      visibility: 'PUBLIC',
      qualificationScore: COACH_CONFIG.reqDocPreview.qualificationScore,
      status: 'NEW'
    });
    
    onNext();
  };

  return (
    <div className="max-w-6xl mx-auto animate-fade-in">
      <button 
        onClick={onBack} 
        className="flex items-center gap-2 mb-6 text-sm font-medium text-blue-600 hover:text-blue-700 hover:underline transition-colors"
      >
        <ArrowLeft size={16} />Back to Dashboard
      </button>
      
      <PageHeader 
        title="Requirement Capture" 
        subtitle="Help us understand your business goals so we can find the perfect solutions and grants for you." 
      />

      <ProgressBar currentStep={1} totalSteps={3} />

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Main Content Area */}
        <div className="lg:col-span-2 space-y-6">
          {/* Textbox - Always visible at top */}
          <Card>
            <div className="space-y-4">
              <div>
                <label className="text-lg font-semibold text-slate-900 mb-2 block">
                  Describe what you're trying to achieve
                </label>
                <div className="relative">
                  <textarea
                    value={coachState.input}
                    readOnly
                    className="goal-textarea w-full p-4 rounded-xl text-slate-900 resize-none"
                    rows={4}
                  />
                  <div className="character-counter absolute top-2 right-2 text-xs text-slate-400 bg-white px-2 py-1 rounded-full shadow-sm">
                    {coachState.input.length} characters
                  </div>
                </div>
              </div>

              {coachState.stage === "INPUT" && (
                <div className="text-right">
                  <motion.button
                    onClick={handleDiagnose}
                    className="bg-blue-600 text-white font-medium px-6 py-3 rounded-lg hover:bg-blue-700 transition-all duration-200 flex items-center gap-2 ml-auto shadow-md hover:shadow-lg"
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <Sparkles size={16} className="text-blue-200" />
                    Diagnose
                    <ArrowRight size={18} />
                  </motion.button>
                </div>
              )}

              {coachState.stage === "INPUT" && (
                <div className="bg-slate-50 rounded-lg p-4 border border-slate-200">
                  <p className="text-sm text-slate-600">
                    Tell us your goal in plain language. We'll help refine it.
                  </p>
                </div>
              )}
            </div>
          </Card>

          {/* Chat Window - Appears after Diagnose */}
          <AnimatePresence>
            {showChat && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: "auto" }}
                exit={{ opacity: 0, height: 0 }}
                transition={{ duration: 0.4, ease: "easeOut" }}
              >
                <ChatWindow 
                  messages={coachState.messages} 
                  onAction={handleChatAction}
                  isTyping={isTyping}
                />
              </motion.div>
            )}
          </AnimatePresence>

          {/* Applied Suggestion Alert */}
          {coachState.stage === "APPLIED" && (
            <Alert variant="success">
              <div className="flex items-center justify-between w-full">
                <div className="flex items-center gap-2">
                  <CheckCircle className="text-emerald-600" />
                  Applied suggested improvement to your goal.
                </div>
                <button
                  onClick={() => setShowChat(!showChat)}
                  className="text-blue-600 hover:text-blue-800 text-sm font-medium transition-colors"
                >
                  {showChat ? 'Hide Chat' : 'Retry Coaching'}
                </button>
              </div>
            </Alert>
          )}

          {/* Preview Section - Shows when applied */}
          {/* ReqDoc Preview commented out as not needed at this stage */}
          {/* {coachState.stage === "PREVIEW_READY" && (
            <ReqDocPreview data={COACH_CONFIG.reqDocPreview} />
          )} */}
        </div>

        {/* Sidebar - Categories and Clarity */}
        <div className="space-y-6">
          {/* Identified Categories */}
          {coachState.categories.length > 0 && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4, ease: "easeOut" }}
            >
              <Card>
                <h4 className="font-semibold text-slate-900 mb-3">Identified Categories</h4>
                <div className="flex flex-wrap gap-2">
                  {coachState.categories.map((category, index) => {
                    const iconMap = {
                      'Growth': TrendingUp,
                      'Marketing': Megaphone,
                      'Digital Transformation': Activity
                    };
                    const colorMap = {
                      'Growth': 'green',
                      'Marketing': 'blue',
                      'Digital Transformation': 'purple'
                    };
                    const Icon = iconMap[category as keyof typeof iconMap] || Target;
                    const color = colorMap[category as keyof typeof colorMap] || 'blue';
                    
                    return (
                      <CategoryChip
                        key={index}
                        label={category}
                        icon={Icon}
                        color={color}
                        index={index}
                      />
                    );
                  })}
                </div>
              </Card>
            </motion.div>
          )}

          {/* Clarity Score */}
          <Card>
            <h4 className="font-semibold text-slate-900 mb-3">Clarity Score</h4>
            <ClarityMeter score={coachState.clarity} />
          </Card>
        </div>
      </div>

      {/* Footer Actions */}
      <motion.div 
        className="mt-8 flex justify-between"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.4, delay: 0.2 }}
      >
        <motion.button
          onClick={onBack}
          className="px-6 py-2 text-slate-600 hover:text-slate-800 transition-colors"
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          Cancel
        </motion.button>
        
        <div className="flex gap-3">
          {/* Preview Structured Fields button commented out as ReqDoc preview is not needed */}
          {/* <AnimatePresence>
            {coachState.stage === "APPLIED" && (
              <motion.button
                key="preview"
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.8 }}
                onClick={handleShowPreview}
                className="bg-slate-100 text-slate-700 font-medium px-6 py-3 rounded-lg hover:bg-slate-200 transition-all duration-200 shadow-sm hover:shadow-md"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                Preview Structured Fields
              </motion.button>
            )}
          </AnimatePresence> */}
          
          <AnimatePresence>
            {(coachState.stage === "APPLIED" || coachState.stage === "PREVIEW_READY") && (
              <motion.button
                key="continue"
                initial={{ opacity: 0, scale: 0.8, x: 20 }}
                animate={{ opacity: 1, scale: 1, x: 0 }}
                exit={{ opacity: 0, scale: 0.8, x: 20 }}
                onClick={handleSubmit}
                className="bg-blue-600 text-white font-medium px-8 py-3 rounded-lg hover:bg-blue-700 transition-all duration-200 flex items-center gap-2 shadow-md hover:shadow-lg"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                Continue → SmartAI Recommends
                <ArrowRight size={18} />
              </motion.button>
            )}
          </AnimatePresence>
        </div>
      </motion.div>
    </div>
  );
};
[Step1_GoalCapture.tsx: end]

File: features/opportunityBuilder/sme/Step2_TRHLS.tsx
[Step2_TRHLS.tsx: start]
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ArrowLeft, ArrowRight, CheckCircle, TrendingUp, Users, DollarSign, Clock, BarChart3 } from 'lucide-react';
import { Card } from '../../../components/common/Card';
import { PageHeader } from '../../../components/common/PageHeader';
import { CompareDrawer } from './CompareDrawer';
import { useTrhlsStore } from '../../../state/trhls/store';
import { getGrantBadgeColor, getImpactColor } from '../../../state/trhls/impact';
import { useAppStore } from '../../../state/store';
import { mockApi } from '../../../mocks/api';

interface Step2_TRHLSProps {
  onNext: () => void;
  onBack: () => void;
}

const ProgressBar: React.FC<{ currentStep: number; totalSteps: number }> = ({ currentStep, totalSteps }) => (
  <div className="mb-8">
    <div className="flex items-center justify-between mb-2">
      <span className="text-sm font-medium text-slate-600">Step {currentStep} of {totalSteps}</span>
      <span className="text-sm text-slate-500">
        {currentStep === 1 && 'Describe Your Goal'}
        {currentStep === 2 && 'AI Recommendations'}
        {currentStep === 3 && 'Grant Relevance & Confidence'}
      </span>
    </div>
    <div className="w-full bg-slate-200 rounded-full h-2">
      <div 
        className="progress-bar h-2 rounded-full transition-all duration-500 ease-out"
        style={{ width: `${(currentStep / totalSteps) * 100}%` }}
      />
    </div>
  </div>
);

const SolutionCard: React.FC<{ 
  solution: any; 
  isSelected: boolean; 
  onToggle: () => void;
  index: number;
}> = ({ solution, isSelected, onToggle, index }) => {
  const grantBadgeColor = getGrantBadgeColor(solution.grantTag);
  
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: index * 0.1 }}
      className={`relative cursor-pointer group ${isSelected ? 'ring-2 ring-blue-500' : ''}`}
      onClick={onToggle}
    >
      <Card className={`h-full transition-all duration-200 ${
        isSelected 
          ? 'bg-blue-50 border-blue-200 shadow-lg' 
          : 'hover:shadow-md hover:scale-[1.02]'
      }`}>
        {/* Selection Badge */}
        {isSelected && (
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            className="absolute -top-2 -right-2 w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center shadow-lg"
          >
            <CheckCircle size={14} className="text-white" />
          </motion.div>
        )}

        {/* Header */}
        <div className="mb-4">
          <div className="flex items-start justify-between mb-2">
            <h3 className="font-semibold text-slate-900 text-lg leading-tight">{solution.name}</h3>
            <span className={`px-2 py-1 rounded-full text-xs font-medium border ${grantBadgeColor}`}>
              {solution.grantTag === 'NON_GRANT' ? 'Self-Funded' : solution.grantTag}
            </span>
          </div>
          <p className="text-sm text-slate-600 mb-3">{solution.whyFit}</p>
        </div>

        {/* Business Impact Preview */}
        <div className="mb-4">
          <h4 className="text-xs font-medium text-slate-700 mb-2 flex items-center gap-1">
            <BarChart3 size={12} />
            Expected Impact
          </h4>
          <div className="grid grid-cols-2 gap-2">
            <div className="text-center p-2 bg-slate-50 rounded-lg">
              <div className={`text-lg font-bold ${getImpactColor(solution.businessImpact.revenueLiftPct, 'revenue')}`}>
                +{solution.businessImpact.revenueLiftPct}%
              </div>
              <div className="text-xs text-slate-600">Revenue Lift</div>
            </div>
            <div className="text-center p-2 bg-slate-50 rounded-lg">
              <div className={`text-lg font-bold ${getImpactColor(solution.businessImpact.leadDeltaPerMonth, 'leads')}`}>
                +{solution.businessImpact.leadDeltaPerMonth}
              </div>
              <div className="text-xs text-slate-600">Leads/mo</div>
            </div>
          </div>
        </div>

        {/* Cost & Duration */}
        <div className="pt-3 border-t border-slate-200">
          <div className="flex justify-between text-sm text-slate-600 mb-2">
            <span>Cost: S${solution.estCostBand[0].toLocaleString()}</span>
            <span>{solution.estDurationMonths[0]}-{solution.estDurationMonths[1]} months</span>
          </div>
          <div className="text-xs text-slate-500">
            {solution.grantTag !== 'NON_GRANT' ? 'Grant-supported' : 'Self-funded'}
          </div>
        </div>

        {/* Hover Effect */}
        <motion.div
          className="absolute inset-0 bg-gradient-to-br from-blue-500/5 to-indigo-500/5 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-200"
          initial={false}
        />
      </Card>
    </motion.div>
  );
};

const CompareBar: React.FC<{ 
  selectedCount: number; 
  onCompare: () => void;
  onClear: () => void;
}> = ({ selectedCount, onCompare, onClear }) => (
  <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    exit={{ opacity: 0, y: 20 }}
    className="fixed bottom-6 left-1/2 transform -translate-x-1/2 z-30"
  >
    <Card className="bg-white shadow-xl border border-slate-200 px-6 py-4">
      <div className="flex items-center gap-4">
        <div className="flex items-center gap-2">
          <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
            <span className="text-sm font-bold text-blue-600">{selectedCount}</span>
          </div>
          <span className="text-sm font-medium text-slate-700">
            {selectedCount} solution{selectedCount > 1 ? 's' : ''} selected
          </span>
        </div>
        
        <div className="flex gap-2">
          <button
            onClick={onCompare}
            className="bg-blue-600 text-white font-medium px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm"
          >
            Compare Solutions
          </button>
          <button
            onClick={onClear}
            className="bg-slate-100 text-slate-700 font-medium px-4 py-2 rounded-lg hover:bg-slate-200 transition-colors text-sm"
          >
            Clear All
          </button>
        </div>
      </div>
    </Card>
  </motion.div>
);

export const Step2_TRHLS: React.FC<Step2_TRHLSProps> = ({ onNext, onBack }) => {
  const { all, selected, toggleSelect, clear } = useTrhlsStore();
  const [showCompare, setShowCompare] = useState(false);

  const handleToggle = (id: string) => {
    toggleSelect(id);
  };

  const handleCompare = () => {
    setShowCompare(true);
  };

  const handleProceed = async () => {
    // Update ReqDoc with selected TRHLS IDs
    const selectedIds = selected.map(s => s.id);
    
    // For now, we'll just proceed to next step
    // In a real app, you'd update the ReqDoc with the selected TRHLS IDs
    console.log('Selected TRHLS IDs:', selectedIds);
    
    onNext();
  };

  const handleClear = () => {
    clear();
  };

  return (
    <div className="max-w-7xl mx-auto animate-fade-in">
      <button 
        onClick={onBack} 
        className="flex items-center gap-2 mb-6 text-sm font-medium text-blue-600 hover:text-blue-700 hover:underline transition-colors"
      >
        <ArrowLeft size={16} />Back to Goal Capture
      </button>
      
      <PageHeader 
        title="AI Recommendations" 
        subtitle="Based on your goal, here are 5 tailored solutions that could help improve your online visibility and customer acquisition." 
      />

      <ProgressBar currentStep={2} totalSteps={3} />

      {/* Solutions Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8">
        {all.map((solution, index) => (
          <SolutionCard
            key={solution.id}
            solution={solution}
            isSelected={selected.some(s => s.id === solution.id)}
            onToggle={() => handleToggle(solution.id)}
            index={index}
          />
        ))}
      </div>

      {/* Selection Instructions */}
      <Card className="bg-blue-50 border-blue-200 mb-8">
        <div className="flex items-start gap-3">
          <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
            <TrendingUp size={16} className="text-blue-600" />
          </div>
          <div>
            <h3 className="font-semibold text-blue-900 mb-1">How to proceed</h3>
            <p className="text-sm text-blue-800">
              Select 1-3 solutions that interest you. You can compare them side-by-side to see detailed impact metrics and grant support information.
            </p>
          </div>
        </div>
      </Card>

      {/* Compare Bar */}
      <AnimatePresence>
        {selected.length > 0 && (
          <CompareBar
            selectedCount={selected.length}
            onCompare={handleCompare}
            onClear={handleClear}
          />
        )}
      </AnimatePresence>

      {/* Compare Drawer */}
      <CompareDrawer
        isOpen={showCompare}
        onClose={() => setShowCompare(false)}
        selected={selected}
        onProceed={handleProceed}
      />

      {/* Footer Actions */}
      <motion.div 
        className="mt-8 flex justify-between"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.4, delay: 0.2 }}
      >
        <motion.button
          onClick={onBack}
          className="px-6 py-2 text-slate-600 hover:text-slate-800 transition-colors"
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          Cancel
        </motion.button>
        
        <div className="flex gap-3">
          <AnimatePresence>
            {selected.length > 0 && (
              <motion.button
                key="continue"
                initial={{ opacity: 0, scale: 0.8, x: 20 }}
                animate={{ opacity: 1, scale: 1, x: 0 }}
                exit={{ opacity: 0, scale: 0.8, x: 20 }}
                onClick={handleProceed}
                className="bg-blue-600 text-white font-medium px-8 py-3 rounded-lg hover:bg-blue-700 transition-all duration-200 flex items-center gap-2 shadow-md hover:shadow-lg"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                Continue with Selected Solutions
                <ArrowRight size={18} />
              </motion.button>
            )}
          </AnimatePresence>
        </div>
      </motion.div>
    </div>
  );
};
[Step2_TRHLS.tsx: end]

File: features/opportunityBuilder/sme/Step3_PrivacyAndConsent.tsx
[Step3_PrivacyAndConsent.tsx: start]
import React, { useState } from 'react';
import { ArrowLeft, ArrowRight, Check } from 'lucide-react';
import { Card } from '../../../components/common/Card';
import { PageHeader } from '../../../components/common/PageHeader';
import { useAppStore } from '../../../state/store';
import { mockApi } from '../../../mocks/api';

interface Step3_PrivacyAndConsentProps {
  onNext: () => void;
  onBack: () => void;
}

export const Step3_PrivacyAndConsent: React.FC<Step3_PrivacyAndConsentProps> = ({ onNext, onBack }) => {
  const { currentReqDocId } = useAppStore();
  const [visibility, setVisibility] = useState<'PRIVATE' | 'LIMITED' | 'PUBLIC'>('PRIVATE');
  const [allowMatching, setAllowMatching] = useState(false);

  const handleNext = async () => {
    if (currentReqDocId) {
      await mockApi.setVisibility(currentReqDocId, visibility);
    }
    onNext();
  };

  const visibilityOptions = [
    {
      value: 'PRIVATE' as const,
      title: 'Private',
      description: 'Only you can see this opportunity',
      details: 'Perfect for confidential projects or when you want to work with specific partners only.'
    },
    {
      value: 'LIMITED' as const,
      title: 'Limited',
      description: 'Visible to pre-qualified partners',
      details: 'SmartGrant will match you with verified vendors and consultants based on your criteria.'
    },
    {
      value: 'PUBLIC' as const,
      title: 'Public',
      description: 'Visible to all registered partners',
      details: 'Maximum visibility for competitive bidding and finding the best match for your project.'
    }
  ];

  return (
    <div className="max-w-4xl mx-auto animate-fade-in">
      <button 
        onClick={onBack} 
        className="flex items-center gap-2 mb-6 text-sm font-medium text-blue-600 hover:text-blue-700 hover:underline transition-colors"
      >
        <ArrowLeft size={16} />Back to Recommendations
      </button>
      
      <PageHeader 
        title="Privacy & Consent" 
        subtitle="Step 3: Set Your Visibility Preferences. Choose how much information to share with potential partners." 
      />

      <Card className="space-y-6">
        <div>
          <h3 className="text-lg font-semibold text-slate-900 mb-4">Visibility Level</h3>
          <div className="space-y-4">
            {visibilityOptions.map(option => (
              <div
                key={option.value}
                onClick={() => setVisibility(option.value)}
                className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
                  visibility === option.value
                    ? 'border-blue-500 bg-blue-50'
                    : 'border-slate-200 hover:border-slate-300'
                }`}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <h4 className="font-semibold text-slate-900">{option.title}</h4>
                    <p className="text-sm text-slate-600 mt-1">{option.description}</p>
                    <p className="text-xs text-slate-500 mt-2">{option.details}</p>
                  </div>
                  {visibility === option.value && (
                    <div className="ml-4 bg-blue-600 text-white rounded-full p-1">
                      <Check size={16} />
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="border-t border-slate-200 pt-6">
          <div className="flex items-center justify-between p-4 bg-slate-50 rounded-lg border border-slate-200">
            <div>
              <label htmlFor="matching-toggle" className="font-medium text-slate-700">
                Allow Smart Matching
              </label>
              <p className="text-sm text-slate-500 mt-1">
                Let SmartGrant automatically match you with suitable vendors and consultants
              </p>
            </div>
            <button
              id="matching-toggle"
              type="button"
              role="switch"
              aria-checked={allowMatching}
              onClick={() => setAllowMatching(!allowMatching)}
              className={`${allowMatching ? 'bg-blue-600' : 'bg-slate-300'} relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2`}
            >
              <span
                aria-hidden="true"
                className={`${allowMatching ? 'translate-x-5' : 'translate-x-0'} inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out`}
              />
            </button>
          </div>
        </div>

        <div className="text-right pt-4 border-t border-slate-200">
          <button
            onClick={handleNext}
            disabled={!allowMatching}
            className="bg-blue-600 text-white font-medium px-8 py-3 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2 ml-auto disabled:bg-slate-300 disabled:text-slate-500 disabled:cursor-not-allowed"
          >
            Continue to Matching Mode
            <ArrowRight size={18} />
          </button>
        </div>
      </Card>
    </div>
  );
};
[Step3_PrivacyAndConsent.tsx: end]

File: features/opportunityBuilder/sme/Step4_MatchingMode.tsx
[Step4_MatchingMode.tsx: start]
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ArrowLeft, ArrowRight, Zap, Info, Eye } from 'lucide-react';
import { Card } from '../../../components/common/Card';
import { PageHeader } from '../../../components/common/PageHeader';
import { ModeCard } from '../../../components/common/ModeCard';
import { PeekNextStep } from '../../../components/common/PeekNextStep';
import { getModeHint, MODE_COPY } from '../../../state/opportunity/uiHints';
import { useAppStore } from '../../../state/store';

interface Step4_MatchingModeProps {
  onNext: () => void;
  onBack: () => void;
}

const ProgressBar: React.FC<{ currentStep: number; totalSteps: number }> = ({ currentStep, totalSteps }) => (
  <div className="mb-8">
    <div className="flex items-center justify-between mb-2">
      <span className="text-sm font-medium text-slate-600">Step {currentStep} of {totalSteps}</span>
      <span className="text-sm text-slate-500">
        {currentStep === 1 && 'Describe Your Goal'}
        {currentStep === 2 && 'AI Recommendations'}
        {currentStep === 3 && 'Grant Relevance & Confidence'}
        {currentStep === 4 && 'Matching Setup'}
      </span>
    </div>
    <div className="w-full bg-slate-200 rounded-full h-2">
      <div 
        className="progress-bar h-2 rounded-full transition-all duration-500 ease-out"
        style={{ width: `${(currentStep / totalSteps) * 100}%` }}
      />
    </div>
  </div>
);

const RecommendationBanner: React.FC<{ 
  recommended: 'CONSULTANT_MANAGED' | 'SME_SELF_MANAGED';
  reason: string;
  onCompare: () => void;
}> = ({ recommended, reason, onCompare }) => (
  <motion.div
    initial={{ opacity: 0, scale: 0.95 }}
    animate={{ opacity: 1, scale: 1 }}
    transition={{ duration: 0.4, ease: "easeOut" }}
    className="bg-gradient-to-r from-indigo-50 to-sky-50 rounded-xl border border-indigo-200 p-4 mb-6"
  >
    <div className="flex items-start gap-3">
      <div className="w-8 h-8 bg-indigo-100 rounded-full flex items-center justify-center flex-shrink-0">
        <Zap size={16} className="text-indigo-600" />
      </div>
      <div className="flex-1">
        <div className="flex items-center gap-2 mb-1">
          <span className="px-2 py-1 bg-indigo-100 text-indigo-700 text-xs font-medium rounded-full">
            Recommended
          </span>
          <div className="group relative">
            <Info size={14} className="text-slate-400 cursor-help" />
            <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-slate-900 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-10">
              {reason}
              <div className="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-slate-900" />
            </div>
          </div>
        </div>
        <p className="text-sm text-slate-700 mb-2">
          Based on your scope and grant context, we suggest{' '}
          <span className="font-medium">
            {recommended === 'CONSULTANT_MANAGED' ? 'Consultant-Managed' : 'SME Self-Managed'}
          </span>{' '}
          for a guided experience.
        </p>
        <button
          onClick={onCompare}
          className="text-xs text-indigo-600 hover:text-indigo-700 font-medium transition-colors"
        >
          Compare modes
        </button>
      </div>
    </div>
  </motion.div>
);

const StickyFooter: React.FC<{
  onBack: () => void;
  onContinue: () => void;
  onPreview: () => void;
  hasSelection: boolean;
  selectedMode: string;
}> = ({ onBack, onContinue, onPreview, hasSelection, selectedMode }) => (
  <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.4, delay: 0.2 }}
    className="sticky bottom-0 bg-white border-t border-slate-200 px-6 py-4 -mx-6 mt-8"
  >
    <div className="flex items-center justify-between">
      <motion.button
        onClick={onBack}
        className="px-6 py-2 text-slate-600 hover:text-slate-800 transition-colors"
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
      >
        Back
      </motion.button>
      
      <div className="flex items-center gap-3">
        <button
          onClick={onPreview}
          className="text-sm text-slate-600 hover:text-slate-800 transition-colors flex items-center gap-1"
        >
          <Eye size={14} />
          Preview next step
        </button>
        
        <motion.button
          onClick={onContinue}
          disabled={!hasSelection}
          className={`px-8 py-3 rounded-lg font-medium transition-all duration-200 flex items-center gap-2 ${
            hasSelection
              ? 'bg-indigo-600 text-white hover:bg-indigo-700 shadow-md hover:shadow-lg'
              : 'bg-slate-100 text-slate-400 cursor-not-allowed'
          }`}
          whileHover={hasSelection ? { scale: 1.02 } : {}}
          whileTap={hasSelection ? { scale: 0.98 } : {}}
        >
          Continue with {selectedMode === 'CONSULTANT_MANAGED' ? 'Consultant-Managed' : 'Self-Managed'} Mode
          <ArrowRight size={18} />
        </motion.button>
      </div>
    </div>
  </motion.div>
);

export const Step4_MatchingMode: React.FC<Step4_MatchingModeProps> = ({ onNext, onBack }) => {
  const { reqDocs } = useAppStore();
  const [selectedMode, setSelectedMode] = useState<'CONSULTANT_MANAGED' | 'SME_SELF_MANAGED' | null>(null);
  const [showPeek, setShowPeek] = useState(false);

  // Get the most recent ReqDoc (in a real app, this would be the current one)
  const currentReqDoc = reqDocs[reqDocs.length - 1] || null;
  const modeHint = getModeHint(currentReqDoc);

  useEffect(() => {
    // Set default selection to recommended mode
    setSelectedMode(modeHint.recommended);
  }, [modeHint.recommended]);

  const handleModeSelect = (mode: 'CONSULTANT_MANAGED' | 'SME_SELF_MANAGED') => {
    setSelectedMode(mode);
  };

  const handleContinue = () => {
    if (selectedMode) {
      // In a real app, you'd update the ReqDoc with the selected matching mode
      console.log('Selected matching mode:', selectedMode);
      onNext();
    }
  };

  const handlePreview = () => {
    setShowPeek(true);
  };

  return (
    <div className="max-w-6xl mx-auto animate-fade-in">
      <button 
        onClick={onBack} 
        className="flex items-center gap-2 mb-6 text-sm font-medium text-indigo-600 hover:text-indigo-700 hover:underline transition-colors"
      >
        <ArrowLeft size={16} />Back to Recommendations
      </button>
      
      <PageHeader 
        title="Matching Setup" 
        subtitle="Choose your workflow. You can switch before invitations go out." 
      />

      <ProgressBar currentStep={4} totalSteps={4} />

      {/* Recommendation Banner */}
      <RecommendationBanner
        recommended={modeHint.recommended}
        reason={modeHint.reason}
        onCompare={() => {/* TODO: Implement compare modal */}}
      />

      {/* Mode Selection */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <ModeCard
          mode="CONSULTANT_MANAGED"
          isSelected={selectedMode === 'CONSULTANT_MANAGED'}
          isRecommended={modeHint.recommended === 'CONSULTANT_MANAGED'}
          onSelect={() => handleModeSelect('CONSULTANT_MANAGED')}
          copy={MODE_COPY.CONSULTANT_MANAGED}
        />
        
        <ModeCard
          mode="SME_SELF_MANAGED"
          isSelected={selectedMode === 'SME_SELF_MANAGED'}
          isRecommended={modeHint.recommended === 'SME_SELF_MANAGED'}
          onSelect={() => handleModeSelect('SME_SELF_MANAGED')}
          copy={MODE_COPY.SME_SELF_MANAGED}
        />
      </div>

      {/* Sticky Footer */}
      <StickyFooter
        onBack={onBack}
        onContinue={handleContinue}
        onPreview={handlePreview}
        hasSelection={!!selectedMode}
        selectedMode={selectedMode || ''}
      />

      {/* Peek Next Step Dialog */}
      <AnimatePresence>
        {showPeek && selectedMode && (
          <PeekNextStep
            isOpen={showPeek}
            onClose={() => setShowPeek(false)}
            selectedMode={selectedMode}
          />
        )}
      </AnimatePresence>
    </div>
  );
};
[Step4_MatchingMode.tsx: end]

File: features/opportunityBuilder/sme/Step5_PreviewAndDispatch.tsx
[Step5_PreviewAndDispatch.tsx: start]
import React, { useState } from 'react';
import { ArrowLeft, ArrowRight, Check, Users, Briefcase } from 'lucide-react';
import { Card } from '../../../components/common/Card';
import { PageHeader } from '../../../components/common/PageHeader';
import { useAppStore } from '../../../state/store';
import { mockApi } from '../../../mocks/api';

interface Step5_PreviewAndDispatchProps {
  onNext: () => void;
  onBack: () => void;
}

const ShortlistCard: React.FC<{
  name: string;
  type: 'vendor' | 'consultant';
  badges: string[];
  whyMatched: string;
  isSelected: boolean;
  onToggle: () => void;
}> = ({ name, type, badges, whyMatched, isSelected, onToggle }) => (
  <Card 
    onClick={onToggle}
    className={`cursor-pointer transition-all ${
      isSelected 
        ? 'border-blue-500 bg-blue-50' 
        : 'hover:border-slate-300'
    }`}
  >
    <div className="flex items-start justify-between">
      <div className="flex-1">
        <div className="flex items-center gap-2 mb-2">
          {type === 'vendor' ? <Users size={16} className="text-blue-500" /> : <Briefcase size={16} className="text-green-500" />}
          <h4 className="font-semibold text-slate-900">{name}</h4>
        </div>
        <div className="flex flex-wrap gap-1 mb-2">
          {badges.map((badge, index) => (
            <span 
              key={index}
              className="px-2 py-0.5 text-xs font-medium rounded-full bg-slate-100 text-slate-700"
            >
              {badge}
            </span>
          ))}
        </div>
        <p className="text-sm text-slate-600">{whyMatched}</p>
      </div>
      {isSelected && (
        <div className="ml-4 bg-indigo-600 text-white rounded-full p-1">
          <Check size={16} />
        </div>
      )}
    </div>
  </Card>
);

export const Step5_PreviewAndDispatch: React.FC<Step5_PreviewAndDispatchProps> = ({ onNext, onBack }) => {
  const { currentReqDocId } = useAppStore();
  const [selectedVendors, setSelectedVendors] = useState<string[]>(['Acme ERP', 'Nova Cloud']);
  const [selectedConsultants, setSelectedConsultants] = useState<string[]>(['Carter Advisory']);

  const vendors = [
    {
      name: 'Acme ERP',
      badges: ['Top Match', 'Budget Fit'],
      whyMatched: 'PSG pre-approved • 3 case studies in F&B • Fast deployment'
    },
    {
      name: 'Nova Cloud',
      badges: ['Fastest Deploy', 'Good Support'],
      whyMatched: 'Cloud-native solution • Strong SG/MY support • Competitive pricing'
    },
    {
      name: 'TechFlow Systems',
      badges: ['Enterprise Grade'],
      whyMatched: 'Large-scale implementations • 24/7 support • Custom integrations'
    }
  ];

  const consultants = [
    {
      name: 'Carter Advisory',
      badges: ['Top Match', 'High Success Rate'],
      whyMatched: '92% win rate • 3 years F&B experience • EDG specialist'
    },
    {
      name: 'Aegis Partners',
      badges: ['Fast Turnaround'],
      whyMatched: '14-day avg submission • Grant optimization expert • Local market knowledge'
    }
  ];

  const toggleVendor = (name: string) => {
    setSelectedVendors(prev => 
      prev.includes(name) 
        ? prev.filter(n => n !== name)
        : [...prev, name]
    );
  };

  const toggleConsultant = (name: string) => {
    setSelectedConsultants(prev => 
      prev.includes(name) 
        ? prev.filter(n => n !== name)
        : [...prev, name]
    );
  };

  const handleDispatch = async () => {
    if (currentReqDocId) {
      await mockApi.seedMatching(currentReqDocId);
    }
    onNext();
  };

  return (
    <div className="max-w-6xl mx-auto animate-fade-in">
      <button 
        onClick={onBack} 
        className="flex items-center gap-2 mb-6 text-sm font-medium text-blue-600 hover:text-blue-700 hover:underline transition-colors"
      >
        <ArrowLeft size={16} />Back to Matching Mode
      </button>
      
      <PageHeader 
        title="Preview & Dispatch" 
        subtitle="Step 5: Review Your Shortlist. Select the vendors and consultants you'd like to invite to your opportunity." 
      />

      <div className="space-y-8">
        <div>
          <h3 className="text-lg font-semibold text-slate-900 mb-4 flex items-center gap-2">
            <Users className="text-blue-500" size={20} />
            Recommended Vendors
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {vendors.map(vendor => (
              <ShortlistCard
                key={vendor.name}
                name={vendor.name}
                type="vendor"
                badges={vendor.badges}
                whyMatched={vendor.whyMatched}
                isSelected={selectedVendors.includes(vendor.name)}
                onToggle={() => toggleVendor(vendor.name)}
              />
            ))}
          </div>
        </div>

        <div>
          <h3 className="text-lg font-semibold text-slate-900 mb-4 flex items-center gap-2">
            <Briefcase className="text-green-500" size={20} />
            Recommended Consultants
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {consultants.map(consultant => (
              <ShortlistCard
                key={consultant.name}
                name={consultant.name}
                type="consultant"
                badges={consultant.badges}
                whyMatched={consultant.whyMatched}
                isSelected={selectedConsultants.includes(consultant.name)}
                onToggle={() => toggleConsultant(consultant.name)}
              />
            ))}
          </div>
        </div>

        <Card className="bg-emerald-50 border-emerald-200">
          <h4 className="font-semibold text-emerald-800 mb-2">Ready to Dispatch</h4>
          <p className="text-sm text-emerald-700">
            You've selected {selectedVendors.length} vendor(s) and {selectedConsultants.length} consultant(s). 
            They will receive masked lead previews and can choose to accept for 1 credit each.
          </p>
        </Card>
      </div>

      <div className="flex justify-between items-center mt-8 pt-6 border-t border-slate-200 dark:border-slate-700">
        <button 
          onClick={onBack} 
          className="bg-slate-200 dark:bg-slate-700 text-slate-800 dark:text-slate-200 px-6 py-3 rounded-lg font-semibold hover:bg-slate-300 dark:hover:bg-slate-600"
        >
          Back
        </button>
        <button 
          onClick={handleDispatch}
          disabled={selectedVendors.length === 0 && selectedConsultants.length === 0}
          className="bg-indigo-600 text-white font-semibold px-8 py-3 rounded-lg hover:bg-indigo-700 transition-colors flex items-center gap-2 ml-auto disabled:bg-slate-300 dark:disabled:bg-slate-700 disabled:text-slate-500 dark:disabled:text-slate-500 disabled:cursor-not-allowed"
        >
          Dispatch Invitations
          <ArrowRight size={18} />
        </button>
      </div>
    </div>
  );
};
[Step5_PreviewAndDispatch.tsx: end]

File: lib/utils.ts
[utils.ts: start]
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
[utils.ts: end]

File: main.tsx
[main.tsx: start]
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './styles/index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
[main.tsx: end]

File: mocks/api.ts
[api.ts: start]
import { useAppStore } from '../state/store';
import { ReqDoc, Lead, Proposal, Quotation } from '../state/types';

// Simulate API latency
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

export const mockApi = {
  // ReqDoc operations
  createReqDoc: async (reqDocData: Omit<ReqDoc, 'id' | 'createdAt' | 'updatedAt'>) => {
    await delay(500);
    return useAppStore.getState().createReqDoc(reqDocData);
  },

  selectTRHLS: async (reqDocId: string, trhlsIds: string[]) => {
    await delay(300);
    useAppStore.getState().selectTRHLS(reqDocId, trhlsIds);
  },

  setVisibility: async (reqDocId: string, visibility: 'PRIVATE' | 'LIMITED' | 'PUBLIC') => {
    await delay(200);
    useAppStore.getState().setVisibility(reqDocId, visibility);
  },

  setMatchingMode: async (reqDocId: string, mode: 'SME_SELF_MANAGED' | 'CONSULTANT_MANAGED') => {
    await delay(200);
    useAppStore.getState().setMatchingMode(reqDocId, mode);
  },

  seedMatching: async (reqDocId: string) => {
    await delay(1000);
    useAppStore.getState().seedMatchingForReqDoc(reqDocId);
  },

  // Lead operations
  acceptLead: async (leadId: string, userId: string) => {
    await delay(800);
    useAppStore.getState().acceptLead(leadId, userId);
  },

  // Proposal/Quotation operations
  submitProposal: async (proposalData: Omit<Proposal, 'id' | 'createdAt'>) => {
    await delay(600);
    return useAppStore.getState().submitProposal(proposalData);
  },

  submitQuotation: async (quotationData: Omit<Quotation, 'id' | 'createdAt'>) => {
    await delay(600);
    return useAppStore.getState().submitQuotation(quotationData);
  },

  // Award operations
  finalizeIndicatives: async (reqDocId: string) => {
    await delay(400);
    useAppStore.getState().finalizeIndicatives(reqDocId);
  },

  awardVendor: async (reqDocId: string, vendorUserId: string) => {
    await delay(500);
    useAppStore.getState().awardVendor(reqDocId, vendorUserId);
  },

  awardConsultant: async (reqDocId: string, consultantUserId: string) => {
    await delay(500);
    useAppStore.getState().awardConsultant(reqDocId, consultantUserId);
  }
};
[api.ts: end]

File: mocks/seeds.trhls.ts
[seeds.trhls.ts: start]
import { TRHLSOption } from "../state/types";

export const TRHLS_FOR_MARKETING_VISIBILITY: TRHLSOption[] = [
  {
    id: "psg-digital-ads-suite",
    name: "PSG Digital Ads & CRM Suite",
    grantTag: "PSG",
    whyFit: "Ideal for SMEs improving lead acquisition through digital ads automation.",
    estCostBand: [20000, 25000],
    estDurationMonths: [3, 4],
    businessImpact: {
      revenueLiftPct: 10,
      leadDeltaPerMonth: 80,
      cacChangePct: -12,
      timeToFirstLeadWeeks: 3
    },
    grantWhy: "PSG supports adoption of pre-approved digital marketing and CRM systems for productivity and lead generation.",
    rationaleSignals: ["Industry fit (F&B/Retail)", "Budget within PSG range", "Proven vendors available"]
  },
  {
    id: "edg-market-expansion-sea",
    name: "EDG Market Expansion (SEA)",
    grantTag: "EDG",
    whyFit: "Supports overseas marketing strategy for regional customer growth.",
    estCostBand: [40000, 60000],
    estDurationMonths: [6, 8],
    businessImpact: {
      revenueLiftPct: 15,
      leadDeltaPerMonth: 100,
      cacChangePct: -8,
      timeToFirstLeadWeeks: 6
    },
    grantWhy: "EDG funds market access projects that build new customer pipelines across SEA.",
    rationaleSignals: ["Export ambition detected", "Medium complexity project", "Consultant-led implementation"]
  },
  {
    id: "edg-brand-refresh",
    name: "EDG Brand Revamp & Content Campaign",
    grantTag: "EDG",
    whyFit: "Improves brand positioning, storytelling and content funnel conversion.",
    estCostBand: [30000, 45000],
    estDurationMonths: [4, 6],
    businessImpact: {
      revenueLiftPct: 9,
      leadDeltaPerMonth: 50,
      cacChangePct: -10,
      timeToFirstLeadWeeks: 5
    },
    grantWhy: "EDG supports branding and content capability building projects tied to growth outcomes.",
    rationaleSignals: ["Creative capability gap", "Good fit for content-driven industries", "Consultant-guided project"]
  },
  {
    id: "ads-sprint-nongrant",
    name: "High Velocity Ads Sprint (Non-Grant)",
    grantTag: "NON_GRANT",
    whyFit: "Quick-start campaign to validate lead generation before full grant execution.",
    estCostBand: [12000, 18000],
    estDurationMonths: [1, 2],
    businessImpact: {
      revenueLiftPct: 5,
      leadDeltaPerMonth: 70,
      cacChangePct: -5,
      timeToFirstLeadWeeks: 2
    },
    rationaleSignals: ["Fast deployment", "Low commitment", "Useful for ROI benchmarking"]
  },
  {
    id: "cro-web-refresh-nongrant",
    name: "CRO + Website UX Refresh (Non-Grant)",
    grantTag: "NON_GRANT",
    whyFit: "Revamps your website UX and analytics to improve conversion rate.",
    estCostBand: [15000, 20000],
    estDurationMonths: [2, 3],
    businessImpact: {
      revenueLiftPct: 6,
      leadDeltaPerMonth: 30,
      cacChangePct: -10,
      timeToFirstLeadWeeks: 4
    },
    rationaleSignals: ["Improves conversion path", "Fast measurable impact", "Pairs with grant-funded MarTech"]
  }
];
[seeds.trhls.ts: end]

File: mocks/seeds.ts
[seeds.ts: start]
import { Company, User, TRHLSOption, CreditWallet } from '../state/types';

export const mockCompanies: Company[] = [
  {
    id: 'company-1',
    name: 'Innovate Pte. Ltd.',
    jurisdiction: 'SG',
    industry: 'Food & Beverage',
    revenueBand: 'S$1M - S$5M',
    headcountBand: '10-50 employees'
  }
];

export const mockUsers: User[] = [
  {
    id: 'user-sme-1',
    name: 'Innovate Pte. Ltd.',
    persona: 'SME',
    companyId: 'company-1',
    credits: 12
  },
  {
    id: 'user-vendor-1',
    name: 'Acme ERP',
    persona: 'VENDOR',
    companyId: 'company-1', // Same company for simplicity
    credits: 5
  },
  {
    id: 'user-vendor-2',
    name: 'Nova Cloud',
    persona: 'VENDOR',
    companyId: 'company-1',
    credits: 8
  },
  {
    id: 'user-consultant-1',
    name: 'Carter Advisory',
    persona: 'CONSULTANT',
    companyId: 'company-1',
    credits: 12
  },
  {
    id: 'user-consultant-2',
    name: 'Aegis Partners',
    persona: 'CONSULTANT',
    companyId: 'company-1',
    credits: 10
  }
];

export const mockTRHLS: TRHLSOption[] = [
  {
    id: 'trhls-1',
    name: 'Cloud ERP Implementation',
    grantTag: 'PSG',
    whyFit: 'Matches your F&B industry & budget for pre-approved systems.',
    estCostBand: [20000, 25000],
    estDurationMonths: [3, 4],
    businessImpact: {
      revenueLiftPct: 15,
      costSavePct: 25,
      opsSpeedupPct: 40
    },
    grantWhy: 'Pre-approved under PSG for productivity solutions in F&B sector.'
  },
  {
    id: 'trhls-2',
    name: 'Targeted Digital Marketing Campaign',
    grantTag: 'EDG',
    whyFit: 'Ideal for your goal to expand into Malaysia (Market Access).',
    estCostBand: [40000, 50000],
    estDurationMonths: [6, 8],
    businessImpact: {
      revenueLiftPct: 35,
      costSavePct: 10,
      opsSpeedupPct: 20
    },
    grantWhy: 'Eligible for EDG support for overseas market expansion initiatives.'
  },
  {
    id: 'trhls-3',
    name: 'Custom Website Development',
    grantTag: 'NON_GRANT',
    whyFit: 'Full custom control, but not aligned with grant support.',
    estCostBand: [15000, 20000],
    estDurationMonths: [2, 3],
    businessImpact: {
      revenueLiftPct: 20,
      costSavePct: 5,
      opsSpeedupPct: 15
    },
    grantWhy: 'Custom development without pre-approved templates typically does not qualify for PSG.'
  }
];

export const mockWallets: CreditWallet[] = [
  { userId: 'user-sme-1', balance: 12 },
  { userId: 'user-vendor-1', balance: 5 },
  { userId: 'user-vendor-2', balance: 8 },
  { userId: 'user-consultant-1', balance: 12 },
  { userId: 'user-consultant-2', balance: 10 }
];
[seeds.ts: end]

File: state/coach/coachConfig.ts
[coachConfig.ts: start]
export const COACH_CONFIG = {
  keywordMap: [
    { keys: ["customer", "customers", "sales", "marketing", "leads"], domain: "GROWTH" },
    { keys: ["inventory", "process", "system", "workflow"], domain: "OPERATIONS" },
    { keys: ["staff", "training", "hiring", "skills"], domain: "CAPABILITY" },
    { keys: ["supplier", "production", "machine", "manufacturing"], domain: "SUPPLY" }
  ],
  clarifiers: {
    GROWTH: [
      { id: "acquisition", label: "Find new customers" },
      { id: "retention",  label: "Improve retention" },
      { id: "visibility", label: "Increase online visibility" }
    ],
    // keep others for future
  },
  suggestionTemplates: {
    GROWTH: {
      coachLine: "Got it — focusing on acquisition and marketing visibility.",
      text: "We're struggling to attract new customers due to low online visibility. We want to improve our reach through digital marketing (SEO/ads) and website improvements.",
      rationale: "This helps us match you to vendors who specialise in lead generation and online presence."
    }
  },
  // Category chips to show under chat (auto from domain + clarifier)
  categoryMap: {
    GROWTH: ["Growth", "Marketing", "Digital Transformation"]
  },
  reqDocPreview: {
    problem: "Low visibility and difficulty attracting new customers",
    goal: "Increase online customer acquisition through digital marketing",
    domain: "Growth",
    complexity: "Low",
    industry: "F&B (example)",
    budgetBand: [25000, 50000],
    timelineMonths: [3, 6],
    grantPredictions: [
      { grant: "EDG", confidence: 0.78, reason: "Market expansion and capability building" },
      { grant: "PSG", confidence: 0.65, reason: "Adoption of digital marketing tools" }
    ],
    qualificationScore: 82
  }
} as const;
[coachConfig.ts: end]

File: state/coach/coachMachine.ts
[coachMachine.ts: start]
import { ChatMessage } from "./types";

export type CoachStage =
  | "INPUT"          // textbox only
  | "CHAT_INIT"      // after Diagnose: AI greets + asks clarifier
  | "CLARIFIER_SHOWN"
  | "SUGGESTION_SHOWN"
  | "APPLIED"        // refined text applied; categories/clarity bump
  | "PREVIEW_READY"; // enable Continue → TRHLS

export interface CoachState {
  stage: CoachStage;
  input: string;
  domain?: "GROWTH" | "OPERATIONS" | "CAPABILITY" | "SUPPLY";
  clarifierId?: string;
  refinedText?: string;
  messages: ChatMessage[];
  categories: string[];
  clarity: number; // 0–100
}

export const initialCoachState: CoachState = {
  stage: "INPUT",
  input: "I want to increase customers for my business",
  messages: [],
  categories: [],
  clarity: 38 // low clarity for vague text
};

// naive clarity calculator for demo:
export function computeClarity({ refined }: { refined: boolean }): number {
  return refined ? 82 : 38;
}

export const coachActions = {
  diagnose(state: CoachState, domain: CoachState["domain"]): CoachState {
    const first: ChatMessage = {
      id: "m1",
      role: "AI",
      text: "It sounds like a marketing or sales growth issue. Which best fits?",
      actions: [
        { id: "acquisition", label: "Find new customers" },
        { id: "retention",  label: "Improve retention" },
        { id: "visibility", label: "Increase online visibility" }
      ]
    };
    return {
      ...state,
      stage: "CHAT_INIT",
      domain,
      messages: [first],
      categories: domain ? ["Growth"] : [],
      clarity: computeClarity({ refined: false })
    };
  },

  chooseClarifier(state: CoachState, clarifierId: string, label: string): CoachState {
    const userMsg: ChatMessage = { id: "m2", role: "SME", text: label };
    const ack: ChatMessage = {
      id: "m3",
      role: "AI",
      text: `Thanks — focusing on ${label.toLowerCase()}.`
    };
    const next: ChatMessage = {
      id: "m4",
      role: "AI",
      text: "Suggested improvement:\n\"We're struggling to attract new customers due to low online visibility. We want to improve our reach through digital marketing (SEO/ads) and website improvements.\"",
      actions: [
        { id: "apply", label: "Apply Suggestion" },
        { id: "back",  label: "Back to Clarifiers" }
      ]
    };
    return {
      ...state,
      stage: "SUGGESTION_SHOWN",
      clarifierId,
      messages: [...state.messages, userMsg, ack, next]
    };
  },

  backToClarifiers(state: CoachState): CoachState {
    // regenerate the first clarifier message
    const back: ChatMessage = {
      id: "m_back",
      role: "AI",
      text: "No problem. Which best fits?",
      actions: [
        { id: "acquisition", label: "Find new customers" },
        { id: "retention",  label: "Improve retention" },
        { id: "visibility", label: "Increase online visibility" }
      ]
    };
    return { ...state, stage: "CLARIFIER_SHOWN", messages: [...state.messages, back] };
  },

  applySuggestion(state: CoachState, refinedText: string, categories: string[]): CoachState {
    const applied: ChatMessage = {
      id: "m_applied",
      role: "SYSTEM",
      text: "Applied suggested improvement to your goal."
    };
    const newClarity = computeClarity({ refined: true });
    return {
      ...state,
      stage: "APPLIED",
      refinedText,
      input: refinedText,         // replace textbox content
      messages: [...state.messages, applied],
      categories,
      clarity: newClarity
    };
  },

  showPreview(state: CoachState): CoachState {
    const msg: ChatMessage = {
      id: "m_preview",
      role: "AI",
      text: "Great — I've normalised your input. You can proceed to recommendations next."
    };
    return { ...state, stage: "PREVIEW_READY", messages: [...state.messages, msg] };
  }
};
[coachMachine.ts: end]

File: state/coach/types.ts
[types.ts: start]
export type BubbleRole = "AI" | "SME" | "SYSTEM";

export interface ChatMessage {
  id: string;
  role: BubbleRole;
  text: string;
  actions?: { id: string; label: string }[]; // e.g., clarifier options, Apply Suggestion
}
[types.ts: end]

File: state/opportunity/uiHints.ts
[uiHints.ts: start]
import { ReqDoc } from '../types';

export const getModeHint = (reqDoc: ReqDoc | null) => {
  if (!reqDoc?.trhlsSelectedIds) {
    return { 
      recommended: 'CONSULTANT_MANAGED' as const, 
      reason: 'Default recommendation for guided experience.' 
    };
  }
  
  const hasEDG = reqDoc.trhlsSelectedIds.some(id => id.includes('edg'));
  return hasEDG
    ? { 
        recommended: 'CONSULTANT_MANAGED' as const, 
        reason: 'EDG items benefit from consultant-led planning.' 
      }
    : { 
        recommended: 'SME_SELF_MANAGED' as const, 
        reason: 'Vendor-first flow suits tool adoption (PSG / non-grant).' 
      };
};

export const MODE_COPY = {
  CONSULTANT_MANAGED: {
    value: 'Expert-guided. You approve decisions; we orchestrate.',
    youHandle: ['Approvals', 'Final selection', 'Payments'],
    weHandle: ['Vendor shortlist', 'Grant paperwork outline', 'Timeline planning'],
    badges: ['Fastest to Start', 'Higher Grant Fit', 'Lower SME Effort'],
    effort: 'Low',
    grantAlignment: 0.85,
    timeToFirstQuote: '≈ 3–5 days',
    footnote: 'Consultant fees are shown transparently before award.'
  },
  SME_SELF_MANAGED: {
    value: 'You drive shortlist; we keep it structured.',
    youHandle: ['Vendor picks', 'Brief consolidation', 'Basic comparisons'],
    weHandle: ['Matching engine', 'Invitation dispatch', 'Status tracking'],
    badges: ['Full Control', 'Direct Vendor Contact'],
    effort: 'Medium',
    grantAlignment: 0.65,
    timeToFirstQuote: '≈ 2–4 days',
    footnote: 'You can invite a consultant later if grants are involved.'
  }
} as const;
[uiHints.ts: end]

File: state/store.ts
[store.ts: start]
import { create } from 'zustand';
import { immer } from 'zustand/middleware/immer';
import { AppState, ReqDoc, Lead, Proposal, Quotation, Match } from './types';
import { mockCompanies, mockUsers, mockTRHLS, mockWallets } from '../mocks/seeds';

export const useAppStore = create<AppState>()(
  immer((set, get) => ({
    // Initial state
    companies: mockCompanies,
    users: mockUsers,
    reqDocs: [],
    trhls: mockTRHLS,
    leads: [],
    proposals: [],
    quotations: [],
    matches: [],
    wallets: mockWallets,
    currentPersona: 'SME',
    currentReqDocId: undefined,

    // Actions
    setCurrentPersona: (persona) => {
      set((state) => {
        state.currentPersona = persona;
      });
    },

    createReqDoc: (reqDocData) => {
      const id = `reqdoc-${Date.now()}`;
      const now = new Date().toISOString();
      
      set((state) => {
        state.reqDocs.push({
          ...reqDocData,
          id,
          createdAt: now,
          updatedAt: now,
        });
        state.currentReqDocId = id;
      });
      
      return id;
    },

    selectTRHLS: (reqDocId, trhlsIds) => {
      set((state) => {
        const reqDoc = state.reqDocs.find(rd => rd.id === reqDocId);
        if (reqDoc) {
          reqDoc.trhlsSelectedIds = trhlsIds;
          reqDoc.updatedAt = new Date().toISOString();
        }
      });
    },

    setVisibility: (reqDocId, visibility) => {
      set((state) => {
        const reqDoc = state.reqDocs.find(rd => rd.id === reqDocId);
        if (reqDoc) {
          reqDoc.visibility = visibility;
          reqDoc.updatedAt = new Date().toISOString();
        }
      });
    },

    setMatchingMode: (reqDocId, mode) => {
      set((state) => {
        const reqDoc = state.reqDocs.find(rd => rd.id === reqDocId);
        if (reqDoc) {
          reqDoc.matchingMode = mode;
          reqDoc.updatedAt = new Date().toISOString();
        }
      });
    },

    seedMatchingForReqDoc: (reqDocId) => {
      set((state) => {
        const reqDoc = state.reqDocs.find(rd => rd.id === reqDocId);
        if (!reqDoc) return;

        // Create match
        const matchId = `match-${Date.now()}`;
        const vendorUserIds = state.users.filter(u => u.persona === 'VENDOR').map(u => u.id);
        const consultantUserIds = state.users.filter(u => u.persona === 'CONSULTANT').map(u => u.id);
        
        state.matches.push({
          id: matchId,
          reqDocId,
          vendorUserIds,
          consultantUserIds,
          createdAt: new Date().toISOString()
        });

        // Create leads for vendors
        vendorUserIds.forEach((userId, index) => {
          const leadId = `lead-vendor-${reqDocId}-${index}`;
          state.leads.push({
            id: leadId,
            reqDocId,
            audience: 'VENDOR',
            maskedPreview: {
              summary: `F&B company seeking ${reqDoc.trhlsSelectedIds.length > 0 ? 'technology solution' : 'business solution'}`,
              budgetBand: reqDoc.budgetBand,
              urgency: reqDoc.complexity === 'HIGH' ? 'HIGH' : reqDoc.complexity === 'MEDIUM' ? 'MEDIUM' : 'LOW',
              grantTag: reqDoc.grantRelevant ? (reqDoc.trhlsSelectedIds.includes('trhls-1') ? 'PSG' : 'EDG') : undefined
            },
            priceCredits: 1,
            qualificationScore: reqDoc.qualificationScore,
            expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days
            createdAt: new Date().toISOString()
          });
        });

        // Create leads for consultants
        consultantUserIds.forEach((userId, index) => {
          const leadId = `lead-consultant-${reqDocId}-${index}`;
          state.leads.push({
            id: leadId,
            reqDocId,
            audience: 'CONSULTANT',
            maskedPreview: {
              summary: `F&B company seeking ${reqDoc.trhlsSelectedIds.length > 0 ? 'technology solution' : 'business solution'}`,
              budgetBand: reqDoc.budgetBand,
              urgency: reqDoc.complexity === 'HIGH' ? 'HIGH' : reqDoc.complexity === 'MEDIUM' ? 'MEDIUM' : 'LOW',
              grantTag: reqDoc.grantRelevant ? (reqDoc.trhlsSelectedIds.includes('trhls-1') ? 'PSG' : 'EDG') : undefined
            },
            priceCredits: 1,
            qualificationScore: reqDoc.qualificationScore,
            expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days
            createdAt: new Date().toISOString()
          });
        });

        // Update reqDoc status
        reqDoc.status = 'SHORTLISTED';
        reqDoc.updatedAt = new Date().toISOString();
      });
    },

    acceptLead: (leadId, userId) => {
      set((state) => {
        const lead = state.leads.find(l => l.id === leadId);
        const wallet = state.wallets.find(w => w.userId === userId);
        
        if (lead && wallet && wallet.balance >= lead.priceCredits) {
          lead.acceptedByUserId = userId;
          wallet.balance -= lead.priceCredits;
          
          // Update reqDoc status if needed
          const reqDoc = state.reqDocs.find(rd => rd.id === lead.reqDocId);
          if (reqDoc && reqDoc.status === 'SHORTLISTED') {
            reqDoc.status = 'PREVIEWED';
            reqDoc.updatedAt = new Date().toISOString();
          }
        }
      });
    },

    submitProposal: (proposalData) => {
      const id = `proposal-${Date.now()}`;
      
      set((state) => {
        state.proposals.push({
          ...proposalData,
          id,
          createdAt: new Date().toISOString()
        });
      });
      
      return id;
    },

    submitQuotation: (quotationData) => {
      const id = `quotation-${Date.now()}`;
      
      set((state) => {
        state.quotations.push({
          ...quotationData,
          id,
          createdAt: new Date().toISOString()
        });
      });
      
      return id;
    },

    finalizeIndicatives: (reqDocId) => {
      set((state) => {
        const reqDoc = state.reqDocs.find(rd => rd.id === reqDocId);
        if (reqDoc) {
          reqDoc.status = 'INDICATIVE';
          reqDoc.updatedAt = new Date().toISOString();
        }
      });
    },

    awardVendor: (reqDocId, vendorUserId) => {
      set((state) => {
        const reqDoc = state.reqDocs.find(rd => rd.id === reqDocId);
        if (reqDoc) {
          reqDoc.status = 'AWARDED';
          reqDoc.updatedAt = new Date().toISOString();
        }
      });
    },

    awardConsultant: (reqDocId, consultantUserId) => {
      set((state) => {
        const reqDoc = state.reqDocs.find(rd => rd.id === reqDocId);
        if (reqDoc) {
          reqDoc.status = 'AWARDED';
          reqDoc.updatedAt = new Date().toISOString();
        }
      });
    }
  }))
);
[store.ts: end]

File: state/trhls/impact.ts
[impact.ts: start]
import { TRHLSOption } from "../types";

export const formatImpact = (opt: TRHLSOption) => [
  { label: "Revenue Lift", value: `${opt.businessImpact.revenueLiftPct}%` },
  { label: "New Leads / mo", value: `${opt.businessImpact.leadDeltaPerMonth}` },
  { label: "CAC Change", value: `${opt.businessImpact.cacChangePct}%` },
  { label: "Time to First Lead", value: `${opt.businessImpact.timeToFirstLeadWeeks} wks` }
];

export const getGrantBadgeColor = (grantTag: string) => {
  switch (grantTag) {
    case "PSG":
      return "bg-blue-100 text-blue-700 border-blue-200";
    case "EDG":
      return "bg-emerald-100 text-emerald-700 border-emerald-200";
    case "NON_GRANT":
      return "bg-slate-100 text-slate-700 border-slate-200";
    default:
      return "bg-gray-100 text-gray-700 border-gray-200";
  }
};

export const getImpactColor = (value: number, type: 'revenue' | 'leads' | 'cac' | 'time') => {
  if (type === 'cac') {
    return value < 0 ? 'text-emerald-600' : 'text-red-600';
  }
  if (type === 'time') {
    return value <= 3 ? 'text-emerald-600' : value <= 6 ? 'text-amber-600' : 'text-slate-600';
  }
  return value >= 10 ? 'text-emerald-600' : value >= 5 ? 'text-amber-600' : 'text-slate-600';
};
[impact.ts: end]

File: state/trhls/store.ts
[store.ts: start]
import { create } from "zustand";
import { TRHLSOption } from "../types";
import { TRHLS_FOR_MARKETING_VISIBILITY } from "../../mocks/seeds.trhls";

interface TRHLSState {
  all: TRHLSOption[];
  selected: TRHLSOption[];
  toggleSelect: (id: string) => void;
  clear: () => void;
}

export const useTrhlsStore = create<TRHLSState>((set, get) => ({
  all: TRHLS_FOR_MARKETING_VISIBILITY,
  selected: [],
  toggleSelect: (id) => {
    const { selected, all } = get();
    const exists = selected.find((s) => s.id === id);
    if (exists) {
      set({ selected: selected.filter((s) => s.id !== id) });
    } else if (selected.length < 3) {
      const newSel = all.find((s) => s.id === id);
      if (newSel) set({ selected: [...selected, newSel] });
    }
  },
  clear: () => set({ selected: [] })
}));
[store.ts: end]

File: state/types.ts
[types.ts: start]
export type Persona = 'SME' | 'VENDOR' | 'CONSULTANT';

export interface Company {
  id: string;
  name: string;
  jurisdiction: 'SG';
  industry: string;
  revenueBand: string;
  headcountBand: string;
}

export interface User {
  id: string;
  name: string;
  persona: Persona;
  companyId: string;
  credits: number;
}

export type VisibilityLevel = 'PRIVATE' | 'LIMITED' | 'PUBLIC';
export type MatchingMode = 'SME_SELF_MANAGED' | 'CONSULTANT_MANAGED';

export interface TRHLSOption {
  id: string;
  name: string;                 // e.g., "Cloud ERP Implementation"
  grantTag: 'PSG' | 'EDG' | 'NON_GRANT';
  whyFit: string;               // explainable text
  estCostBand: [number, number];
  estDurationMonths: [number, number];
  businessImpact: { 
    revenueLiftPct?: number; 
    costSavePct?: number; 
    opsSpeedupPct?: number;
    leadDeltaPerMonth?: number;
    cacChangePct?: number;
    timeToFirstLeadWeeks?: number;
  };
  grantWhy?: string;            // "Pre-approved under PSG …"
  rationaleSignals?: string[];  // AI reasoning signals
}

export interface ReqDoc {
  id: string;
  companyId: string;
  problem: string;
  goal: string;
  domain: string;
  complexity: 'LOW' | 'MEDIUM' | 'HIGH';
  budgetBand: [number, number];
  timelineMonths: [number, number];
  grantRelevant: boolean;
  trhlsSelectedIds: string[];   // chosen solution paths (1–2)
  visibility: VisibilityLevel;
  matchingMode?: MatchingMode;
  qualificationScore: number;   // 0–100
  status: 'NEW' | 'SHORTLISTED' | 'PREVIEWED' | 'ACCEPTED' | 'INDICATIVE' | 'QNA' | 'DECISIONED' | 'AWARDED';
  createdAt: string;
  updatedAt: string;
}

export interface Lead {
  id: string;
  reqDocId: string;
  audience: 'VENDOR' | 'CONSULTANT';
  maskedPreview: { 
    summary: string; 
    budgetBand: [number, number]; 
    urgency: 'LOW'|'MEDIUM'|'HIGH'; 
    grantTag?: 'PSG'|'EDG'|'NON_GRANT' 
  };
  priceCredits: number;
  qualificationScore: number;
  expiresAt: string;
  acceptedByUserId?: string; // when accepted → unmask
  createdAt: string;
}

export interface Quotation { 
  id: string; 
  vendorUserId: string; 
  reqDocId: string; 
  priceBand: [number, number]; 
  summary: string; 
  version: number;
  createdAt: string;
}

export interface Proposal { 
  id: string; 
  consultantUserId: string; 
  reqDocId: string; 
  feeBand: [number, number]; 
  approach: string; 
  timeline: [number, number]; 
  version: number;
  createdAt: string;
}

export interface Match { 
  id: string; 
  reqDocId: string; 
  vendorUserIds: string[]; 
  consultantUserIds: string[];
  createdAt: string;
}

export interface CreditWallet { 
  userId: string; 
  balance: number;
}

// Store state interface
export interface AppState {
  // Data arrays
  companies: Company[];
  users: User[];
  reqDocs: ReqDoc[];
  trhls: TRHLSOption[];
  leads: Lead[];
  proposals: Proposal[];
  quotations: Quotation[];
  matches: Match[];
  wallets: CreditWallet[];
  
  // UI state
  currentPersona: Persona;
  currentReqDocId?: string;
  
  // Actions
  setCurrentPersona: (persona: Persona) => void;
  createReqDoc: (reqDoc: Omit<ReqDoc, 'id' | 'createdAt' | 'updatedAt'>) => string;
  selectTRHLS: (reqDocId: string, trhlsIds: string[]) => void;
  setVisibility: (reqDocId: string, visibility: VisibilityLevel) => void;
  setMatchingMode: (reqDocId: string, mode: MatchingMode) => void;
  seedMatchingForReqDoc: (reqDocId: string) => void;
  acceptLead: (leadId: string, userId: string) => void;
  submitProposal: (proposal: Omit<Proposal, 'id' | 'createdAt'>) => string;
  submitQuotation: (quotation: Omit<Quotation, 'id' | 'createdAt'>) => string;
  finalizeIndicatives: (reqDocId: string) => void;
  awardVendor: (reqDocId: string, vendorUserId: string) => void;
  awardConsultant: (reqDocId: string, consultantUserId: string) => void;
}
[types.ts: end]

File: styles/index.css
[index.css: start]
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    font-family: 'Inter', sans-serif;
  }
}

@layer utilities {
  .animate-fade-in {
    animation: fadeIn 0.5s ease-in-out;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
}

/* Custom slider styles */
.slider {
  -webkit-appearance: none;
  appearance: none;
  background: transparent;
  cursor: pointer;
}

.slider::-webkit-slider-track {
  background: #e2e8f0;
  height: 8px;
  border-radius: 4px;
}

.slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  background: #3b82f6;
  height: 20px;
  width: 20px;
  border-radius: 50%;
  cursor: pointer;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: all 0.2s ease;
}

.slider::-webkit-slider-thumb:hover {
  background: #2563eb;
  transform: scale(1.1);
}

.slider::-moz-range-track {
  background: #e2e8f0;
  height: 8px;
  border-radius: 4px;
  border: none;
}

.slider::-moz-range-thumb {
  background: #3b82f6;
  height: 20px;
  width: 20px;
  border-radius: 50%;
  cursor: pointer;
  border: none;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  transition: all 0.2s ease;
}

.slider::-moz-range-thumb:hover {
  background: #2563eb;
  transform: scale(1.1);
}

/* Enhanced textarea and form styling */
.goal-textarea {
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  border: 2px solid #e2e8f0;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.goal-textarea:focus {
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1), 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  background: #ffffff;
}

.goal-textarea:hover {
  border-color: #cbd5e1;
  box-shadow: 0 2px 4px -1px rgba(0, 0, 0, 0.1);
}

/* Intent chip animations */
.intent-chip {
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  transform: translateY(0);
}

.intent-chip:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 8px -2px rgba(0, 0, 0, 0.1);
}

.intent-chip.selected {
  transform: translateY(-2px);
  box-shadow: 0 6px 12px -2px rgba(0, 0, 0, 0.15);
}

/* AI Coach animations */
.ai-coach-enter {
  animation: slideInUp 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Character counter animation */
.character-counter {
  animation: fadeIn 0.2s ease-in-out;
}

/* Progress bar enhancements */
.progress-bar {
  background: linear-gradient(90deg, #3b82f6 0%, #1d4ed8 100%);
  box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);
}
[index.css: end]

